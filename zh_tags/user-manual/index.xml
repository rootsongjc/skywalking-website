<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache SkyWalking – User Manual</title>
    <link>/zh_tags/user-manual/</link>
    <description>Recent content in User Manual on Apache SkyWalking</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 13 Dec 2020 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/zh_tags/user-manual/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Zh: SkyWalking报警发送到钉钉群</title>
      <link>/zh/2020-12-13-skywalking-alarm/</link>
      <pubDate>Sun, 13 Dec 2020 00:00:00 +0000</pubDate>
      
      <guid>/zh/2020-12-13-skywalking-alarm/</guid>
      <description>
        
        
        &lt;p&gt;这篇文章暂时不讲告警策略, 直接看默认情况下激活的告警目标以及钉钉上的告警效果&lt;/p&gt;
&lt;p&gt;SkyWalking内置了很多默认的告警策略, 然后根据告警策略生成告警目标, 我们可以很容易的在界面上看到&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20201213163408221.png&#34; alt=&#34;image-20201213163408221&#34;&gt;&lt;/p&gt;
&lt;p&gt;当我们想去让这些告警目标通知到我们时, 由于SkyWalking目前版本(8.3)已经自带了, 只需要简单配置一下即可&lt;/p&gt;
&lt;p&gt;我们先来钉钉群中创建机器人并勾选加签&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20201213164116760.png&#34; alt=&#34;image-20201213164116760&#34;&gt;&lt;/p&gt;
&lt;p&gt;然后再修改告警部分的配置文件, 如果你是默认的配置文件(就像我一样), 你可以直接执行以下命令, 反之你也可以手动修改configs/alarm-settings.yml文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;tee &amp;lt;your_skywalking_path&amp;gt;/configs/alarm-settings.yml &amp;lt;&amp;lt;-&#39;EOF&#39;
dingtalkHooks:
  textTemplate: |-
    {
      &amp;quot;msgtype&amp;quot;: &amp;quot;text&amp;quot;,
      &amp;quot;text&amp;quot;: {
        &amp;quot;content&amp;quot;: &amp;quot;Apache SkyWalking Alarm: \n %s.&amp;quot;
      }
    }
  webhooks:
    - url: https://oapi.dingtalk.com/robot/send?access_token=&amp;lt;access_token&amp;gt;
      secret: &amp;lt;加签值&amp;gt;
EOF
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;最终效果如下&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;image-20201213164145494.png&#34; alt=&#34;image-20201213164145494&#34;&gt;&lt;/p&gt;
&lt;p&gt;参考文档:&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/apache/skywalking/blob/master/docs/en/setup/backend/backend-alarm.md&#34;&gt;https://github.com/apache/skywalking/blob/master/docs/en/setup/backend/backend-alarm.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq/uKPlK&#34;&gt;https://ding-doc.dingtalk.com/doc#/serverapi2/qf2nxq/uKPlK&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;谢谢观看, 后续我会在SkyWalking告警这块写更多实战文章&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Zh: 度量服务网格健康度——Apdex得分</title>
      <link>/zh/2020-07-26-apdex-and-skywalking/</link>
      <pubDate>Sun, 26 Jul 2020 00:00:00 +0000</pubDate>
      
      <guid>/zh/2020-07-26-apdex-and-skywalking/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;作者: Srinivasan Ramaswamy, tetrate&lt;/li&gt;
&lt;li&gt;翻译：唐昊杰，南京大学在读学生&lt;/li&gt;
&lt;li&gt;校对：吴晟&lt;/li&gt;
&lt;li&gt;Original link, &lt;a href=&#34;https://www.tetrate.io/blog/the-apdex-score-for-measuring-service-mesh-health/&#34;&gt;Tetrate.io blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;July. 26th, 2020&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;你感觉怎么样-比-你的症状是什么-更重要&#34;&gt;&amp;ldquo;你感觉怎么样&amp;rdquo; 比 &amp;ldquo;你的症状是什么&amp;rdquo; 更重要&lt;/h2&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl5813wt9j33200tcb2b.jpg&#34; alt=&#34;alt_text&#34; title=&#34;Intro to Apdex&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;背景&#34;&gt;&lt;strong&gt;背景&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;最近我拜访了我的医生。每次去看病，医生都会首先问我一连串轻快的问题，比如：你今天过得怎么样？上周过的怎么样？最近有什么出行吗？你打破了自己的骑车记录吗？你的锻炼计划实施如何？最后他会问：“你有什么麻烦吗？”如果这个时候我感觉自己不太好，我会说：“我这周感觉很沉闷，临近中午的时候感觉更累。”这时他就会拿出听诊器、脉搏血氧仪和血压仪。然后，如果他觉得自己需要更深入的了解情况，他就开始列出我需要做的具体检查。&lt;/p&gt;
&lt;p&gt;当我问他，最开始的讨论是否只是为了缓和氛围。他说：“这是必不可少的部分。它帮助我发现你感觉如何，而不是你的症状是什么。&amp;quot;。我们这样关于生活的开场聊天，帮助他组织了后续关于症状、调查和测试结果的问题。&lt;/p&gt;
&lt;p&gt;在回来的路上，我不停地问自己：“我们是不是也应该用这种方式管理我们的网格(service mesh)？”&lt;/p&gt;
&lt;p&gt;如果我把自己的健康检查和网格的健康检查进行类比，“医疗检查”就是日志分析，“调查”就是追踪，“症状”就是传统的RED指标（请求速率、请求错误和请求耗时）。那么根本的问题，就是我们在这里讨论的：健康因素（主要是网格的健康）。&lt;/p&gt;
&lt;h3 id=&#34;服务网格中的健康状况&#34;&gt;&lt;strong&gt;服务网格中的健康状况&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;我们可以通过RED指标来衡量任何被观察到的服务的性能。RED指标在了解每个服务的性能、可靠性和吞吐量方面提供了巨大的价值。这些指标在网格上的令人信服的可视化使得监控全部网格变得标准化和可扩展。此外，根据这些指标的阈值设置警报有助于在指标值异常的时候进行异常检测。&lt;/p&gt;
&lt;p&gt;为了建立任何服务的上下文环境并观察它们，理想的做法是将网格可视化为一个拓扑结构。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl5821d3vj316z0u0hdt.jpg&#34; alt=&#34;alt_text&#34; title=&#34;Topology&#34;&gt;&lt;/p&gt;
&lt;p&gt;网格的拓扑结构可视化不仅允许使用者挑选任意服务并观察其指标，还可以提供有关服务依赖和特定服务在网格上的潜在影响这些重要信息。&lt;/p&gt;
&lt;p&gt;虽然每个服务的RED指标为使用者提供了深刻的洞察能力，但使用者更关心网格的整体响应性，而非每个单独出来的服务的响应性。&lt;/p&gt;
&lt;p&gt;为了描述任意服务的性能（即从提交请求到收到完成了的http响应这段时间内的表现），我们会测量用户对响应性的感知。这种将响应时间与设定的阈值进行比较的衡量标准叫做Apdex。Apdex是衡量一个服务在网格中的健康程度的指标。&lt;/p&gt;
&lt;h3 id=&#34;apdex&#34;&gt;&lt;strong&gt;Apdex&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Apdex是根据设定的阈值和响应时间结合考虑的衡量标准。它是满意响应时间和不满意响应时间相对于总响应时间的比率。&lt;/p&gt;
&lt;p&gt;Apdex是根据应用和服务的响应时间来衡量使用者满意程度的行业标准。它衡量的是用户对你的服务的满意程度，因为传统的指标（如平均响应时间）可能很快就会容易形成偏差。&lt;/p&gt;
&lt;p&gt;基于满意度的响应时间，表示特定服务的往返响应时间小于设定的阈值的次数。不满意响应时间虽然意思相反，但又进一步分为容忍型和失望型。容忍型包括了了任何响应时间不超过四倍阈值的表现，而任何超过四倍阈值或遇到了错误的表现都被认为是失望型。这里提到的阈值是我们对任意服务所期望的理想响应表现。我们可以设置一个全局范围的阈值，如，500ms。&lt;/p&gt;
&lt;p&gt;Apdex得分是满意型请求和容忍型请求与做出的总请求的比率。&lt;/p&gt;
&lt;p&gt;每个_满意的请求_算作一个请求，而每个_容忍的请求_算作半个_满意_的请求。&lt;/p&gt;
&lt;p&gt;一个Apdex得分从0到1的范围内取值。0是最差的分数，表示用户总是感到失望；而&#39;1&amp;rsquo;是最好的分数（100%的响应时间是令人满意的）。&lt;/p&gt;
&lt;p&gt;这个分数的百分比表示也可以用作服务的健康指标。&lt;/p&gt;
&lt;h2 id=&#34;数学表示&#34;&gt;&lt;strong&gt;数学表示&lt;/strong&gt;&lt;/h2&gt;
&lt;p&gt;Apdex得分的实际计算是通过以下公式实现的：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;		                   满意请求数 +  ( 容忍请求数 / 2 )

Apdex 得分  =  ------------------------------------------------------

                                总请求数
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;此公示得到的百分率，即可视为服务的健康度。&lt;/p&gt;
&lt;h3 id=&#34;样例计算&#34;&gt;&lt;strong&gt;样例计算&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在两分钟的采样时间内，主机处理200个请求。&lt;/p&gt;
&lt;p&gt;Apdex阈值T设置为0.5秒（500ms）。&lt;/p&gt;
&lt;p&gt;*.	170个请求在500ms内被处理完成，它们被分类为满意型。
*.	20个请求在500ms和2秒间被处理，它们被分类为容忍型。
*.	剩余的10个请求没有被正确处理或者处理时间超过了2秒，所以它们被分类为失望型。&lt;/p&gt;
&lt;p&gt;最终的Apdex得分是0.9，即（170 + （20 / 2））/ 200。&lt;/p&gt;
&lt;h3 id=&#34;深入使用&#34;&gt;&lt;strong&gt;深入使用&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;在接下来的层次，我们可以尝试通过根据节点的健康状况来着色节点以改进我们的拓扑可视化。此外，我们还可以在用户点击服务时将健康状况作为我们展示的信息的一部分。&lt;/p&gt;
&lt;p&gt;Apdex规范推荐了以下Apdex质量评级，将Apdex得分分为优秀（0.94 - 1.00）、良好（0.85 - 0.93）、一般（0.70 - 0.84）、差（0.50 - 0.69）和不可接受（0.00 - 0.49）。&lt;/p&gt;
&lt;p&gt;为了可视化网格的健康状况，我们用交通灯的颜色将我们的节点标记为健康、有风险和不健康，其中不健康表示健康率低于80%。健康率在80%到95%之间的表示有风险，健康率在95%及以上的称为健康。&lt;/p&gt;
&lt;p&gt;让我们将这种着色融入到我们的拓扑可视化中，并将其可用性提升到一个新的水平。如果实施，我们将看到下图所示的情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl58088b6j316z0u0kjl.jpg&#34; alt=&#34;alt_text&#34; title=&#34;Health For Services&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;更进一步&#34;&gt;&lt;strong&gt;更进一步&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;Apdex为客户对我们服务响应性的满意度提供了可见性。更有甚者，通过将实施范围扩展到调用该服务的调用关系，我们可以进一步了解网格本身的健康状况。&lt;/p&gt;
&lt;p&gt;两个有着相似Apdex分数的服务，为客户提供了相同的客户满意度。然而，流入服务的流量大小对于优先处理哪一服务有着巨大的帮助。流量较高的服务表明这种服务体验影响了网格上更大量的使用者。&lt;/p&gt;
&lt;p&gt;虽然健康程度与单个服务有关，但我们也可以分析两个服务之间的交互并计算交互过程的健康程度。这种对网格上每一个交互的健康程度的计算，可以帮助我们根据整个拓扑结构中所有交互的健康程度，建立一个关键路径。&lt;/p&gt;
&lt;p&gt;在一个大的网格中，将流量展示为另一个数字将使可视化和监控更具挑战性。我们可以根据服务的吞吐量，通过用不同的粗细程度渲染连接服务的边来改善整个可视化的效果。&lt;/p&gt;
&lt;p&gt;一个位于高吞吐量事务的不健康的服务可能会导致资源的过度消耗。另一方面，这种可视化也为调整服务时获取最大化投资效果提供了一个很好的提示。&lt;/p&gt;
&lt;p&gt;与调整一个偶尔使用的服务相比，调整作为高吞吐量事务的一部分的那些服务会带来指数级的收益。&lt;/p&gt;
&lt;p&gt;实施这种包括了交互的健康状况和吞吐量的可视化，我们会看到下图所示的情况:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl5alrth6j316z0u0kjl.jpg&#34; alt=&#34;image-20201111125919085&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;这一天即将到来&#34;&gt;&lt;strong&gt;这一天即将到来&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;目前&lt;/strong&gt;，这些功能已经作为Tetrate服务网格平台的UI功能之一来提供给用户。该平台使用了高速可配置化、高性能的可观测性和监控性能管理平台：Apache SkyWalking (&lt;a href=&#34;https://skywalking.apache.org/&#34;&gt;https://skywalking.apache.org&lt;/a&gt;)，SkyWalking可以监控整个网格的流量，为服务及它们的交互合计RED指标，持续计算和监控服务的健康状况，并使用户能够在服务超过特定阈值时配置报警和通知。这些功能使得SkyWalking对网格拥有全面的健康状况可见性。&lt;/p&gt;
&lt;p&gt;有了这样强大的网格性能可视性，我们将可以在为网格准备的网络运营中心使用这种拓扑结构作为我们的HUD（Heads Up Display）。&lt;/p&gt;
&lt;p&gt;HUD随着时间的推移收集了解到的信息和模式，并将预测各种情况和主动提示我们潜在的重点领域以提高客户满意度。&lt;/p&gt;
&lt;p&gt;丰富的历史数据的可视化也可以使网络工程师能够看看过去中类似的一天的网格表现。&lt;/p&gt;
&lt;p&gt;可视化效果如下图所示。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl5a5be9tj316z0u0qv5.jpg&#34; alt=&#34;image-20201111125853233&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;总结&#34;&gt;&lt;strong&gt;总结&lt;/strong&gt;&lt;/h3&gt;
&lt;p&gt;综合到目前为止的所有讨论，网格的健康状况更多地是关于用户的感受，以及我们作为服务提供商可以采取积极行动来维持（如果不能增强）用户的体验。&lt;/p&gt;
&lt;p&gt;着个人化医学的发展，现在距离我的医生给我发这样短信的日子并不遥远：“要不今天享用冰淇淋并且沿着灰色小山步道到达沙斯塔山！”相似的，我们可以通过更好地了解客户的整体健康状况为他们做更多的事情。&lt;/p&gt;
&lt;p&gt;Tetrate的“服务网格健康程度”方法不仅提供了管理，监视和支持，而且从一开始就使基础架构保持健康以减少事故发生的可能性。在Istio，Envoy和SkyWalking的支持下，Tetrate的解决方案可为任何环境中的任何工作负载提供持续的端到端可观察性，运行时安全性和流量管理。&lt;/p&gt;
&lt;p&gt;我们的客户应该拥有健康的系统！请分享您对使用服务网格为我们的客户带来令人兴奋和强健的体验的想法。&lt;/p&gt;
&lt;h3 id=&#34;引用&#34;&gt;&lt;strong&gt;引用&lt;/strong&gt;&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/Apdex&#34;&gt;https://en.wikipedia.org/wiki/Apdex&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.apdex.org/overview.html&#34;&gt;https://www.apdex.org/overview.html&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.apdex.org/index.php/specifications/&#34;&gt;https://www.apdex.org/index.php/specifications/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://skywalking.apache.org/&#34;&gt;https://skywalking.apache.org/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Zh: SkyWalking 极简入门</title>
      <link>/zh/2020-04-19-skywalking-quick-start/</link>
      <pubDate>Sun, 19 Apr 2020 00:00:00 +0000</pubDate>
      
      <guid>/zh/2020-04-19-skywalking-quick-start/</guid>
      <description>
        
        
        &lt;p&gt;目录：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;1. 概述&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;2. 搭建 SkyWalking 单机环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;3. 搭建 SkyWalking 集群环境&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;4. 告警&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;5. 注意事项&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;6. Spring Boot 使用示例&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#&#34;&gt;6. Spring Cloud 使用示例&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;作者：&lt;a href=&#34;https://github.com/YunaiV&#34;&gt;芋道源码&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/install/?skywalkinng&#34;&gt;原文地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h1 id=&#34;1-概述&#34;&gt;1. 概述&lt;/h1&gt;
&lt;h2 id=&#34;11-概念&#34;&gt;1.1 概念&lt;/h2&gt;
&lt;p&gt;SkyWalking 是什么？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FROM &lt;a href=&#34;http://skywalking.apache.org/&#34;&gt;http://skywalking.apache.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;分布式系统的应用程序性能监视工具，专为微服务、云原生架构和基于容器（Docker、K8s、Mesos）架构而设计。&lt;/p&gt;
&lt;p&gt;提供分布式追踪、服务网格遥测分析、度量聚合和可视化一体化解决方案。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;12-功能列表&#34;&gt;1.2 功能列表&lt;/h2&gt;
&lt;p&gt;SkyWalking 有哪些功能？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FROM &lt;a href=&#34;http://skywalking.apache.org/&#34;&gt;http://skywalking.apache.org/&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;多种监控手段。可以通过语言探针和 service mesh 获得监控是数据。&lt;/li&gt;
&lt;li&gt;多个语言自动探针。包括 Java，.NET Core 和 Node.JS。&lt;/li&gt;
&lt;li&gt;轻量高效。无需大数据平台，和大量的服务器资源。&lt;/li&gt;
&lt;li&gt;模块化。UI、存储、集群管理都有多种机制可选。&lt;/li&gt;
&lt;li&gt;支持告警。&lt;/li&gt;
&lt;li&gt;优秀的可视化解决方案。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;h2 id=&#34;13-整体架构&#34;&gt;1.3 整体架构&lt;/h2&gt;
&lt;p&gt;SkyWalking 整体架构如何？&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;FROM &lt;a href=&#34;http://skywalking.apache.org/&#34;&gt;http://skywalking.apache.org/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl533fk5xj31pc0s8h04.jpg&#34; alt=&#34;架构图&#34;&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;整个架构，分成上、下、左、右四部分：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;考虑到让描述更简单，我们舍弃掉 Metric 指标相关，而着重在 Tracing 链路相关功能。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;上部分 &lt;strong&gt;Agent&lt;/strong&gt; ：负责从应用中，收集链路信息，发送给 SkyWalking OAP 服务器。目前支持 SkyWalking、Zikpin、Jaeger 等提供的 Tracing 数据信息。而我们目前采用的是，SkyWalking Agent 收集 SkyWalking Tracing 数据，传递给服务器。&lt;/li&gt;
&lt;li&gt;下部分 &lt;strong&gt;SkyWalking OAP&lt;/strong&gt; ：负责接收 Agent 发送的 Tracing 数据信息，然后进行分析(Analysis Core) ，存储到外部存储器( Storage )，最终提供查询( Query )功能。&lt;/li&gt;
&lt;li&gt;右部分 &lt;strong&gt;Storage&lt;/strong&gt; ：Tracing 数据存储。目前支持 ES、MySQL、Sharding Sphere、TiDB、H2 多种存储器。而我们目前采用的是 ES ，主要考虑是 SkyWalking 开发团队自己的生产环境采用 ES 为主。&lt;/li&gt;
&lt;li&gt;左部分 &lt;strong&gt;SkyWalking UI&lt;/strong&gt; ：负责提供控台，查看链路等等。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;14-官方文档&#34;&gt;1.4 官方文档&lt;/h2&gt;
&lt;p&gt;在 &lt;a href=&#34;https://github.com/apache/skywalking/tree/master/docs&#34;&gt;https://github.com/apache/skywalking/tree/master/docs&lt;/a&gt; 地址下，提供了 SkyWalking 的&lt;strong&gt;英文&lt;/strong&gt;文档。&lt;/p&gt;
&lt;p&gt;考虑到大多数胖友的英语水平和艿艿不相伯仲，再加上胖友一开始对 SkyWalking 比较陌生，所以比较推荐先阅读 &lt;a href=&#34;https://github.com/SkyAPM/document-cn-translation-of-skywalking&#34;&gt;https://github.com/SkyAPM/document-cn-translation-of-skywalking&lt;/a&gt; 地址，提供了 SkyWalking 的&lt;strong&gt;中文&lt;/strong&gt;文档。&lt;/p&gt;
&lt;p&gt;考虑到胖友使用 SkyWalking 的目的，是实现&lt;strong&gt;分布式链路追踪&lt;/strong&gt;的功能，所以最好去了解下相关的知识。这里推荐阅读两篇文章：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/opentracing-contrib/opentracing-specification-zh&#34;&gt;《OpenTracing 官方标准 —— 中文版》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Google 论文 &lt;a href=&#34;http://www.iocoder.cn/Fight/Dapper-translation/?self&#34;&gt;《Dapper，大规模分布式系统的跟踪系统》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;2-搭建-skywalking-单机环境&#34;&gt;2. 搭建 SkyWalking 单机环境&lt;/h1&gt;
&lt;p&gt;考虑到让胖友更快的入门，我们来搭建一个 SkyWalking &lt;strong&gt;单机&lt;/strong&gt;环境，步骤如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl533oq0xj30ww0pomzt.jpg&#34; alt=&#34;SkyWalking 单机环境&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步，搭建一个 Elasticsearch 服务。&lt;/li&gt;
&lt;li&gt;第二步，下载 SkyWalking 软件包。&lt;/li&gt;
&lt;li&gt;第三步，搭建一个 SkyWalking OAP 服务。&lt;/li&gt;
&lt;li&gt;第四步，启动一个 Spring Boot 应用，并配置 SkyWalking Agent。&lt;/li&gt;
&lt;li&gt;第五步，搭建一个 SkyWalking UI 服务。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仅仅五步，按照艿艿标题党的性格，应该给本文取个《10 分钟快速搭建 SkyWalking 服务》标题才对，哈哈哈。&lt;/p&gt;
&lt;h2 id=&#34;21-elasticsearch-搭建&#34;&gt;2.1 Elasticsearch 搭建&lt;/h2&gt;
&lt;blockquote&gt;
&lt;p&gt;FROM &lt;a href=&#34;https://www.elastic.co/cn/products/elasticsearch&#34;&gt;https://www.elastic.co/cn/products/elasticsearch&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Elasticsearch 是一个分布式、RESTful 风格的搜索和数据分析引擎，能够解决不断涌现出的各种用例。 作为 Elastic Stack 的核心，它集中存储您的数据，帮助您发现意料之中以及意料之外的情况。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考&lt;a href=&#34;http://www.iocoder.cn/Elasticsearch/install/?self&#34;&gt;《Elasticsearch 极简入门》&lt;/a&gt;的&lt;a href=&#34;#&#34;&gt;「1. 单机部署」&lt;/a&gt;小节，搭建一个 Elasticsearch 单机服务。&lt;/p&gt;
&lt;p&gt;不过要&lt;strong&gt;注意&lt;/strong&gt;，本文使用的是 Elasticsearch &lt;code&gt;7.5.1&lt;/code&gt; 版本。因为 SkyWalking &lt;a href=&#34;https://github.com/apache/skywalking/releases/tag/v6.6.0&#34;&gt;&lt;code&gt;6.6.0&lt;/code&gt;&lt;/a&gt; 版本，增加了对 Elasticsearch 7.X 版本的支持。当然，如果胖友使用 Elasticsearch 6.X 版本也是可以的。&lt;/p&gt;
&lt;h2 id=&#34;22-下载-skywalking-软件包&#34;&gt;2.2 下载 SkyWalking 软件包&lt;/h2&gt;
&lt;p&gt;对于 SkyWalking 的软件包，有两种方式获取：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;手动编译&lt;/li&gt;
&lt;li&gt;官方包&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;一般情况下，我们建议使用&lt;strong&gt;官方包&lt;/strong&gt;。手动编译，更多是尝鲜或者等着急修复的 BUG 的版本。&lt;/p&gt;
&lt;h3 id=&#34;221-官方包&#34;&gt;2.2.1 官方包&lt;/h3&gt;
&lt;p&gt;在 &lt;a href=&#34;http://skywalking.apache.org/downloads/&#34;&gt;http://skywalking.apache.org/downloads/&lt;/a&gt; 下，我们下载&lt;strong&gt;操作系统&lt;/strong&gt;对应的发布版。&lt;/p&gt;
&lt;p&gt;这里，我们选择 &lt;a href=&#34;https://www.apache.org/dyn/closer.cgi/skywalking/6.6.0/apache-skywalking-apm-es7-6.6.0.tar.gz&#34;&gt;Binary Distribution for ElasticSearch 7 (Linux)&lt;/a&gt; 版本，因为艿艿是 Mac 环境，再加上想使用 Elasticsearch 7.X 版本作为存储。如果胖友想用 Elasticsearch 6.X 版本作为存储，记得下载 &lt;a href=&#34;https://www.apache.org/dyn/closer.cgi/skywalking/6.6.0/apache-skywalking-apm-6.6.0.tar.gz&#34;&gt;Binary Distribution (Linux)&lt;/a&gt; 版本。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;① 下载&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 创建目录&lt;/span&gt;
$ mkdir -p /Users/yunai/skywalking
$ &lt;span style=&#34;color:#0086b3&#34;&gt;cd&lt;/span&gt; /Users/yunai/skywalking

&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 下载&lt;/span&gt;
$ wget http://mirror.bit.edu.cn/apache/skywalking/6.6.0/apache-skywalking-apm-es7-6.6.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;② 解压&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 解压&lt;/span&gt;
$ tar -zxvf apache-skywalking-apm-es7-6.6.0.tar.gz
$ &lt;span style=&#34;color:#0086b3&#34;&gt;cd&lt;/span&gt;  apache-skywalking-apm-bin-es7

$ ls -ls
 &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; drwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;8&lt;/span&gt; root root  &lt;span style=&#34;color:#099&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 15:09 agent &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# SkyWalking Agent&lt;/span&gt;
 &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; drwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt; root root  &lt;span style=&#34;color:#099&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 15:44 bin &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 执行脚本&lt;/span&gt;
 &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; drwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt; root root  &lt;span style=&#34;color:#099&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 15:44 config &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# SkyWalking OAP Server 配置文件&lt;/span&gt;
&lt;span style=&#34;color:#099&#34;&gt;32&lt;/span&gt; -rwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#099&#34;&gt;28903&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 14:32 LICENSE
 &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; drwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;3&lt;/span&gt; root root  &lt;span style=&#34;color:#099&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 15:44 licenses
&lt;span style=&#34;color:#099&#34;&gt;32&lt;/span&gt; -rwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#099&#34;&gt;31850&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 14:32 NOTICE
&lt;span style=&#34;color:#099&#34;&gt;16&lt;/span&gt; drwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt; root root &lt;span style=&#34;color:#099&#34;&gt;16384&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 15:22 oap-libs &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# SkyWalking OAP Server&lt;/span&gt;
 &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; -rw-r--r-- &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; root root  &lt;span style=&#34;color:#099&#34;&gt;1978&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 14:32 README.txt
 &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; drwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt; root root  &lt;span style=&#34;color:#099&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 15:44 webapp &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# SkyWalking UI&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;222-手动编译&#34;&gt;2.2.2 手动编译&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;友情提示：如果胖友没有编译 SkyWalking 源码的诉求，可以跳过本小节。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://github.com/apache/skywalking/blob/v6.3.0/docs/en/guides/How-to-build.md&#34;&gt;How to build project&lt;/a&gt; 文章。&lt;/p&gt;
&lt;p&gt;需要前置安装如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;GIT&lt;/li&gt;
&lt;li&gt;JDK 8+&lt;/li&gt;
&lt;li&gt;Maven&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;① 克隆代码&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ git clone https://github.com/apache/skywalking.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;因为网络问题，可能克隆会有点久。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;② 初始化子模块&lt;/strong&gt;：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#0086b3&#34;&gt;cd&lt;/span&gt; skywalking
$ git submodule init
$ git submodule update
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;③ 编译&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ ./mvnw clean package -DskipTests
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;编译过程，如果机子比较差，花费时间会比较久。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;④ 查看编译结果&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;$ &lt;span style=&#34;color:#0086b3&#34;&gt;cd&lt;/span&gt; apm-dist &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 编译结果目录&lt;/span&gt;
$ &lt;span style=&#34;color:#0086b3&#34;&gt;cd&lt;/span&gt; target
$ tar -zxvf apache-skywalking-apm-bin.tar.gz &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 解压 Linux 包&lt;/span&gt;
$ &lt;span style=&#34;color:#0086b3&#34;&gt;cd&lt;/span&gt; apache-skywalking-apm-bin
$ ls -ls
 &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; drwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;8&lt;/span&gt; root root  &lt;span style=&#34;color:#099&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 15:09 agent &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# SkyWalking Agent&lt;/span&gt;
 &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; drwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt; root root  &lt;span style=&#34;color:#099&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 15:44 bin &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 执行脚本&lt;/span&gt;
 &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; drwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt; root root  &lt;span style=&#34;color:#099&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 15:44 config &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# SkyWalking OAP Server 配置文件&lt;/span&gt;
&lt;span style=&#34;color:#099&#34;&gt;32&lt;/span&gt; -rwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#099&#34;&gt;28903&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 14:32 LICENSE
 &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; drwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;3&lt;/span&gt; root root  &lt;span style=&#34;color:#099&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 15:44 licenses
&lt;span style=&#34;color:#099&#34;&gt;32&lt;/span&gt; -rwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; root root &lt;span style=&#34;color:#099&#34;&gt;31850&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 14:32 NOTICE
&lt;span style=&#34;color:#099&#34;&gt;16&lt;/span&gt; drwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt; root root &lt;span style=&#34;color:#099&#34;&gt;16384&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 15:22 oap-libs &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# SkyWalking OAP Server&lt;/span&gt;
 &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; -rw-r--r-- &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; root root  &lt;span style=&#34;color:#099&#34;&gt;1978&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 14:32 README.txt
 &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; drwxr-xr-x &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt; root root  &lt;span style=&#34;color:#099&#34;&gt;4096&lt;/span&gt; Sep  &lt;span style=&#34;color:#099&#34;&gt;9&lt;/span&gt; 15:44 webapp &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# SkyWalking UI&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;23-skywalking-oap-搭建&#34;&gt;2.3 SkyWalking OAP 搭建&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;① 修改 OAP 配置文件&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;友情提示：如果配置文件，适合 SkyWalking 6.X 版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-YAML&#34; data-lang=&#34;YAML&#34;&gt;$ vi config/application.yml&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;storage&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;elasticsearch7&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;nameSpace&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_NAMESPACE:&amp;#34;elasticsearch&amp;#34;}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;clusterNodes&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_STORAGE_ES_CLUSTER_NODES:localhost:9200}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;protocol&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_STORAGE_ES_HTTP_PROTOCOL:&amp;#34;http&amp;#34;}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;#    trustStorePath: ${SW_SW_STORAGE_ES_SSL_JKS_PATH:&amp;#34;../es_keystore.jks&amp;#34;}&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;#    trustStorePass: ${SW_SW_STORAGE_ES_SSL_JKS_PASS:&amp;#34;&amp;#34;}&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;user&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_ES_USER:&amp;#34;&amp;#34;}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;password&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_ES_PASSWORD:&amp;#34;&amp;#34;}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;indexShardsNumber&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_STORAGE_ES_INDEX_SHARDS_NUMBER:2}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;indexReplicasNumber&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_STORAGE_ES_INDEX_REPLICAS_NUMBER:0}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Those data TTL settings will override the same settings in core module.&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;recordDataTTL&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_STORAGE_ES_RECORD_DATA_TTL:7}&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Unit is day&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;otherMetricsDataTTL&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_STORAGE_ES_OTHER_METRIC_DATA_TTL:45}&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Unit is day&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;monthMetricsDataTTL&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_STORAGE_ES_MONTH_METRIC_DATA_TTL:18}&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Unit is month&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Batch process setting, refer to https://www.elastic.co/guide/en/elasticsearch/client/java-api/5.5/java-docs-bulk-processor.html&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;bulkActions&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_STORAGE_ES_BULK_ACTIONS:1000}&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Execute the bulk every 1000 requests&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;flushInterval&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_STORAGE_ES_FLUSH_INTERVAL:10}&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# flush the bulk every 10 seconds whatever the number of requests&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;concurrentRequests&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_STORAGE_ES_CONCURRENT_REQUESTS:2}&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# the number of concurrent requests&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;resultWindowMaxSize&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_STORAGE_ES_QUERY_MAX_WINDOW_SIZE:10000}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;metadataQueryMaxSize&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_STORAGE_ES_QUERY_MAX_SIZE:5000}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;segmentQueryMaxSize&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;${SW_STORAGE_ES_QUERY_SEGMENT_SIZE:200}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;#  h2:&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;#    driver: ${SW_STORAGE_H2_DRIVER:org.h2.jdbcx.JdbcDataSource}&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;#    url: ${SW_STORAGE_H2_URL:jdbc:h2:mem:skywalking-oap-db}&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;#    user: ${SW_STORAGE_H2_USER:sa}&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;#    metadataQueryMaxSize: ${SW_STORAGE_H2_QUERY_MAX_SIZE:5000}&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;&lt;code&gt;storage.elasticsearch7&lt;/code&gt; 配置项，设置使用 Elasticsearch 7.X 版本作为存储器。
&lt;ul&gt;
&lt;li&gt;这里，我们打开注释，并记得通过 &lt;code&gt;nameSpace&lt;/code&gt; 设置 Elasticsearch 集群名。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storage.elasticsearch&lt;/code&gt; 配置项，设置使用 Elasticsearch 6.X 版本作为存储器。
&lt;ul&gt;
&lt;li&gt;这里，我们无需做任何改动。&lt;/li&gt;
&lt;li&gt;如果胖友使用 Elasticsearch 6.X 版本作为存储器，记得设置这个配置项，而不是 &lt;code&gt;storage.elasticsearch7&lt;/code&gt; 配置项。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storage.h2&lt;/code&gt; 配置项，设置使用 H2 作为存储器。
&lt;ul&gt;
&lt;li&gt;这里，我们需要手动注释掉，因为 H2 是默认配置的存储器。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;友情提示：如果配置文件，适合 SkyWalking 7.X 版本。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl534r2llj30pc0rs1kx.jpg&#34; alt=&#34;配置文件&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;重点修改 &lt;code&gt;storage&lt;/code&gt; 配置项，通过 &lt;code&gt;storage.selector&lt;/code&gt; 配置项来设置具体使用的存储器。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storage.elasticsearch&lt;/code&gt; 配置项，设置使用 Elasticsearch 6.X 版本作为存储器。胖友可以主要修改 &lt;code&gt;nameSpace&lt;/code&gt;、&lt;code&gt;clusterNodes&lt;/code&gt; 两个配置项即可，设置使用的 Elasticsearch 的集群和命名空间。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;storage.elasticsearch7&lt;/code&gt; 配置项，设置使用 Elasticsearch 7.X 版本作为存储器。&lt;/li&gt;
&lt;li&gt;还有 MySQL、H2、InfluxDB 等等存储器的配置可以选择，胖友自己根据需要去选择哈~&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;② 启动 SkyWalking OAP 服务&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;$ bin/oapService.sh

SkyWalking OAP started successfully!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;是否&lt;strong&gt;真正&lt;/strong&gt;启动成功，胖友打开 &lt;code&gt;logs/skywalking-oap-server.log&lt;/code&gt; 日志文件，查看是否有错误日志。首次启动时，因为 SkyWalking OAP 会创建 Elasticsearch 的索引，所以会“疯狂”的打印日志。最终，我们看到如下日志，基本可以代表 SkyWalking OAP 服务启动成功：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;友情提示：因为首次启动会创建 Elasticsearch 索引，所以可能会比较慢。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;2020&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;01&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;02 18&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;22&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;53&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;635 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt; org&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;eclipse&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;jetty&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;server&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;Server&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt; 444 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; INFO  &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt; Started &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@35249ms&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;24-skywalking-ui-搭建&#34;&gt;2.4 SkyWalking UI 搭建&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;① 启动 SkyWalking UI 服务&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;bin/webappService.sh

SkyWalking Web Application started successfully!
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;是否&lt;strong&gt;真正&lt;/strong&gt;启动成功，胖友打开 &lt;code&gt;logs/logs/webapp.log&lt;/code&gt; 日志文件，查看是否有错误日志。最终，我们看到如下日志，基本可以代表 SkyWalking UI 服务启动成功：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;2020&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;01&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;02 18&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;27&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;02&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;824&lt;/span&gt;  INFO 48250 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;---&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]&lt;/span&gt; o&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;a&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;s&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;apm&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;webapp&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;ApplicationStartUp&lt;/span&gt;      &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; Started ApplicationStartUp in 7&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;774&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;seconds&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;JVM running &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;for&lt;/span&gt; 8&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;316&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;如果想要修改 SkyWalking UI 服务的参数，可以编辑 &lt;code&gt;webapp/webapp.yml&lt;/code&gt; 配置文件。例如说：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;server.port&lt;/code&gt; ：SkyWalking UI 服务端口。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;collector.ribbon.listOfServers&lt;/code&gt; ：SkyWalking OAP 服务地址数组。因为 SkyWalking UI 界面的数据，是通过请求 SkyWalking OAP 服务来获得的。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;② 访问 UI 界面：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;浏览器打开 &lt;code&gt;http://127.0.0.1:8080&lt;/code&gt; 。界面如下图：&lt;img src=&#34;0081Kckwly1gkl534a7rnj31f60u0gtw.jpg&#34; alt=&#34;SkyWalking UI&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;25-skywalking-agent&#34;&gt;2.5 SkyWalking Agent&lt;/h2&gt;
&lt;p&gt;大多数情况下，我们在启动项目的 Shell 脚本上，通过 &lt;code&gt;-javaagent&lt;/code&gt; 参数进行配置 SkyWalking Agent 。我们在 &lt;a href=&#34;#&#34;&gt;「2.3.1 Shell」&lt;/a&gt; 小节来看。&lt;/p&gt;
&lt;p&gt;考虑到偶尔我们需要在 IDE 中，也希望使用 SkyWalking Agent ，所以我们在 &lt;a href=&#34;#&#34;&gt;「2.3.2 IDEA」&lt;/a&gt; 小节来看。&lt;/p&gt;
&lt;h3 id=&#34;231-shell&#34;&gt;2.3.1 Shell&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;① Agent 软件包&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们需要将 &lt;code&gt;apache-skywalking-apm-bin/agent&lt;/code&gt; 目录，拷贝到 Java 应用所在的服务器上。这样，Java 应用才可以配置使用该 SkyWalking Agent。我们来看看 Agent 目录下有哪些：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;$ ls -ls

total &lt;span style=&#34;color:#099&#34;&gt;35176&lt;/span&gt;
    &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt; drwxr-xr-x@  &lt;span style=&#34;color:#099&#34;&gt;7&lt;/span&gt; yunai  staff       &lt;span style=&#34;color:#099&#34;&gt;224&lt;/span&gt; Dec &lt;span style=&#34;color:#099&#34;&gt;24&lt;/span&gt; 14:20 activations
    &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt; drwxr-xr-x@  &lt;span style=&#34;color:#099&#34;&gt;4&lt;/span&gt; yunai  staff       &lt;span style=&#34;color:#099&#34;&gt;128&lt;/span&gt; Dec &lt;span style=&#34;color:#099&#34;&gt;24&lt;/span&gt; 14:21 bootstrap-plugins
    &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt; drwxr-xr-x@  &lt;span style=&#34;color:#099&#34;&gt;3&lt;/span&gt; yunai  staff        &lt;span style=&#34;color:#099&#34;&gt;96&lt;/span&gt; Dec &lt;span style=&#34;color:#099&#34;&gt;24&lt;/span&gt; 14:12 config &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# SkyWalking Agent 配置&lt;/span&gt;
    &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt; drwxr-xr-x@  &lt;span style=&#34;color:#099&#34;&gt;3&lt;/span&gt; yunai  staff        &lt;span style=&#34;color:#099&#34;&gt;96&lt;/span&gt; Jan  &lt;span style=&#34;color:#099&#34;&gt;2&lt;/span&gt; 19:29 logs &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# SkyWalking Agent 日志&lt;/span&gt;
    &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt; drwxr-xr-x@ &lt;span style=&#34;color:#099&#34;&gt;13&lt;/span&gt; yunai  staff       &lt;span style=&#34;color:#099&#34;&gt;416&lt;/span&gt; Dec &lt;span style=&#34;color:#099&#34;&gt;24&lt;/span&gt; 14:22 optional-plugins &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 可选插件&lt;/span&gt;
    &lt;span style=&#34;color:#099&#34;&gt;0&lt;/span&gt; drwxr-xr-x@ &lt;span style=&#34;color:#099&#34;&gt;68&lt;/span&gt; yunai  staff      &lt;span style=&#34;color:#099&#34;&gt;2176&lt;/span&gt; Dec &lt;span style=&#34;color:#099&#34;&gt;24&lt;/span&gt; 14:20 plugins &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 插件&lt;/span&gt;
&lt;span style=&#34;color:#099&#34;&gt;35176&lt;/span&gt; -rw-r--r--@  &lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt; yunai  staff  &lt;span style=&#34;color:#099&#34;&gt;18006420&lt;/span&gt; Dec &lt;span style=&#34;color:#099&#34;&gt;24&lt;/span&gt; 14:12 skywalking-agent.jar &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# SkyWalking Agent&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;关于 SkyWalking Agent 提供的插件列表，可以看看&lt;a href=&#34;https://github.com/SkyAPM/document-cn-translation-of-skywalking/blob/master/docs/zh/master/setup/service-agent/java-agent/Supported-list.md&#34;&gt;《SkyWalking 文档 —— 插件支持列表》&lt;/a&gt;。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为艿艿是在本机测试，所以无需拷贝，SkyWalking Agent 目录是 &lt;code&gt;/Users/yunai/skywalking/apache-skywalking-apm-bin-es7/agent/&lt;/code&gt;。&lt;/p&gt;
&lt;p&gt;考虑到方便胖友，艿艿这里提供了一个最简的 Spring Boot 应用 &lt;a href=&#34;http://static.iocoder.cn/lab-39-demo-2.2.2.RELEASE.jar&#34;&gt;lab-39-demo-2.2.2.RELEASE.jar&lt;/a&gt;。对应 Github 仓库是 &lt;a href=&#34;https://github.com/YunaiV/SpringBoot-Labs/tree/master/lab-39/lab-39-demo&#34;&gt;lab-39-demo&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;② 配置 Java 启动脚本&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# SkyWalking Agent 配置&lt;/span&gt;
&lt;span style=&#34;color:#0086b3&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;SW_AGENT_NAME&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;demo-application &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 配置 Agent 名字。一般来说，我们直接使用 Spring Boot 项目的 `spring.application.name` 。&lt;/span&gt;
&lt;span style=&#34;color:#0086b3&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;SW_AGENT_COLLECTOR_BACKEND_SERVICES&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;127.0.0.1:11800 &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 配置 Collector 地址。&lt;/span&gt;
&lt;span style=&#34;color:#0086b3&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;SW_AGENT_SPAN_LIMIT&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;2000&lt;/span&gt; &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 配置链路的最大 Span 数量。一般情况下，不需要配置，默认为 300 。主要考虑，有些新上 SkyWalking Agent 的项目，代码可能比较糟糕。&lt;/span&gt;
&lt;span style=&#34;color:#0086b3&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;JAVA_AGENT&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;-javaagent:/Users/yunai/skywalking/apache-skywalking-apm-bin-es7/agent/skywalking-agent.jar &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# SkyWalking Agent jar 地址。&lt;/span&gt;

&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# Jar 启动&lt;/span&gt;
java -jar &lt;span style=&#34;color:#008080&#34;&gt;$JAVA_AGENT&lt;/span&gt; -jar lab-39-demo-2.2.2.RELEASE.jar
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;通过环境变量，进行配置。&lt;/li&gt;
&lt;li&gt;更多的变量，可以在 &lt;a href=&#34;https://github.com/apache/skywalking/blob/master/apm-sniffer/config/agent.config&#34;&gt;&lt;code&gt;/work/programs/skywalking/apache-skywalking-apm-bin/agent/config/agent.config&lt;/code&gt;&lt;/a&gt; 查看。要注意，可能有些变量是被注释掉的，例如说 &lt;code&gt;SW_AGENT_SPAN_LIMIT&lt;/code&gt; 对应的 &lt;code&gt;agent.span_limit_per_segment&lt;/code&gt; 。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;③ 执行脚本：&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接执行上述的 Shell 脚本，启动 Java 项目。在启动日志中，我们可以看到 SkyWalking Agent 被加载的日志。日志示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;DEBUG 2020&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;01&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;02 19&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;29&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;29&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;400 main AgentPackagePath &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; The beacon &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;location&lt;/span&gt; is jar&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;file&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:/&lt;/span&gt;Users&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;yunai&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;skywalking&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;apache&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;skywalking&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;apm&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;bin&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;es7&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;agent&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;skywalking&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;agent&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;jar&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!/&lt;/span&gt;org&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;apache&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;skywalking&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;apm&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;agent&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;core&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;boot&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;AgentPackagePath&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;
INFO 2020&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;01&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;02 19&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;29&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;29&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;402 main SnifferConfigInitializer &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; Config file found in &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;Users&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;yunai&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;skywalking&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;apache&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;skywalking&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;apm&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;bin&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;es7&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;agent&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;config&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;/&lt;/span&gt;agent&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;config&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;同时，也可以在 &lt;code&gt;/Users/yunai/skywalking/apache-skywalking-apm-bin-es7/agent/agent/logs/skywalking-api.log&lt;/code&gt; 查看对应的 SkyWalking Agent 日志。日志示例如下：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;DEBUG 2020&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;01&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;02 19&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;37&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;22&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;539 SkywalkingAgent&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;5&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;ServiceAndEndpointRegisterClient&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt;0 ServiceAndEndpointRegisterClient &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt; ServiceAndEndpointRegisterClient running&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; status&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;:&lt;/span&gt;CONNECTED&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;这里，我们看到 &lt;code&gt;status:CONNECTED&lt;/code&gt; ，表示 SkyWalking Agent 连接 SkyWalking OAP 服务成功。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;④ 简单测试&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;完事，可以去 SkyWalking UI 查看是否链路收集成功。&lt;/p&gt;
&lt;p&gt;1、首先，使用浏览器，访问下 &lt;a href=&#34;http://127.0.0.1:8079/demo/echo&#34;&gt;http://127.0.0.1:8079/demo/echo&lt;/a&gt; 地址，请求下 Spring Boot 应用提供的 API。因为，我们要追踪下该链路。&lt;/p&gt;
&lt;p&gt;2、然后，继续使用浏览器，打开 &lt;a href=&#34;http://127.0.0.1:8080/&#34;&gt;http://127.0.0.1:8080/&lt;/a&gt; 地址，进入 SkyWalking UI 界面。如下图所示：&lt;img src=&#34;2017-01-01_02.png&#34; alt=&#34;SkyWalking UI 界面 —— 仪表盘&#34;&gt;&lt;/p&gt;
&lt;p&gt;这里，我们会看到 SkyWalking 中非常重要的三个概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务(Service)&lt;/strong&gt; ：表示对请求提供相同行为的一系列或一组工作负载。在使用 Agent 或 SDK 的时候，你可以定义服务的名字。如果不定义的话，SkyWalking 将会使用你在平台（例如说 Istio）上定义的名字。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里，我们可以看到 Spring Boot 应用的&lt;strong&gt;服务&lt;/strong&gt;为 &lt;code&gt;&amp;quot;demo-application&amp;quot;&lt;/code&gt;，就是我们在环境变量 &lt;code&gt;SW_AGENT_NAME&lt;/code&gt; 中所定义的。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;服务实例(Service Instance)&lt;/strong&gt; ：上述的一组工作负载中的每一个工作负载称为一个实例。就像 Kubernetes 中的 pods 一样, 服务实例未必就是操作系统上的一个进程。但当你在使用 Agent 的时候, 一个服务实例实际就是操作系统上的一个真实进程。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里，我们可以看到 Spring Boot 应用的&lt;strong&gt;服务&lt;/strong&gt;为 &lt;code&gt;{agent_name}-pid:{pid}@{hostname}&lt;/code&gt;，由 Agent 自动生成。关于它，我们在&lt;a href=&#34;#&#34;&gt;「5.1 hostname」&lt;/a&gt;小节中，有进一步的讲解，胖友可以瞅瞅。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;端点(Endpoint)&lt;/strong&gt; ：对于特定服务所接收的请求路径, 如 HTTP 的 URI 路径和 gRPC 服务的类名 + 方法签名。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;这里，我们可以看到 Spring Boot 应用的一个&lt;strong&gt;端点&lt;/strong&gt;，为 API 接口 &lt;code&gt;/demo/echo&lt;/code&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3、之后，点击「拓扑图」菜单，进入查看拓扑图的界面。如下图所示：&lt;img src=&#34;2017-01-01_03.png&#34; alt=&#34;SkyWalking UI 界面 —— 拓扑图&#34;&gt;&lt;/p&gt;
&lt;p&gt;4、再之后，点击「追踪」菜单，进入查看链路数据的界面。如下图所示：&lt;img src=&#34;0081Kckwly1gkl535q88ej31ds0u0k0p.jpg&#34; alt=&#34;SkyWalking UI 界面 —— 追踪&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;232-idea&#34;&gt;2.3.2 IDEA&lt;/h3&gt;
&lt;p&gt;我们统一使用 IDEA 作为开发 IDE ，所以忽略 Eclipse 的配置方式。&lt;/p&gt;
&lt;p&gt;具体参考下图，比较简单：&lt;img src=&#34;0081Kckwly1gkl5354kg7j30rs0egwkv.jpg&#34; alt=&#34;IDEA 界面&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;3-搭建-skywalking-集群环境&#34;&gt;3. 搭建 SkyWalking 集群环境&lt;/h1&gt;
&lt;p&gt;在生产环境下，我们一般推荐搭建 SkyWalking 集群环境。😈 当然，如果公司比较抠门，也可以在生产环境下使用 SkyWalking 单机环境，毕竟 SkyWalking 挂了之后，不影响业务的正常运行。&lt;/p&gt;
&lt;p&gt;搭建一个 SkyWalking &lt;strong&gt;集群&lt;/strong&gt;环境，步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第一步，搭建一个 Elasticsearch 服务的&lt;strong&gt;集群&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;第二步，搭建一个注册中心的&lt;strong&gt;集群&lt;/strong&gt;。目前 SkyWalking 支持 Zookeeper、Kubernetes、Consul、Nacos 作为注册中心。&lt;/li&gt;
&lt;li&gt;第三步，搭建一个 SkyWalking OAP 服务的&lt;strong&gt;集群&lt;/strong&gt;，同时参考&lt;a href=&#34;https://github.com/SkyAPM/document-cn-translation-of-skywalking/blob/master/docs/zh/master/setup/backend/backend-cluster.md&#34;&gt;《SkyWalking 文档 —— 集群管理》&lt;/a&gt;，将 SkyWalking OAP 服务注册到注册中心上。&lt;/li&gt;
&lt;li&gt;第四步，启动一个 Spring Boot 应用，并配置 SkyWalking Agent。另外，在设置 SkyWaling Agent 的 &lt;code&gt;SW_AGENT_COLLECTOR_BACKEND_SERVICES&lt;/code&gt; 地址时，需要设置多个 SkyWalking OAP 服务的地址数组。&lt;/li&gt;
&lt;li&gt;第五步，搭建一个 SkyWalking UI 服务的&lt;strong&gt;集群&lt;/strong&gt;，同时使用 Nginx 进行负载均衡。另外，在设置 SkyWalking UI 的 &lt;code&gt;collector.ribbon.listOfServers&lt;/code&gt; 地址时，也需要设置多个 SkyWalking OAP 服务的地址数组。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;😈 具体的搭建过程，并不复杂，胖友自己去尝试下。&lt;/p&gt;
&lt;h1 id=&#34;4-告警&#34;&gt;4. 告警&lt;/h1&gt;
&lt;p&gt;在 SkyWaling 中，已经提供了告警功能，具体可见&lt;a href=&#34;https://github.com/SkyAPM/document-cn-translation-of-skywalking/blob/master/docs/zh/master/setup/backend/backend-alarm.md&#34;&gt;《SkyWalking 文档 —— 告警》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;默认情况下，SkyWalking 已经&lt;a href=&#34;https://github.com/SkyAPM/document-cn-translation-of-skywalking/blob/master/docs/zh/master/setup/backend/backend-alarm.md#%E9%BB%98%E8%AE%A4%E5%91%8A%E8%AD%A6%E8%A7%84%E5%88%99&#34;&gt;内置告警规则&lt;/a&gt;。同时，我们可以参考&lt;a href=&#34;https://github.com/SkyAPM/document-cn-translation-of-skywalking/blob/master/docs/zh/master/setup/backend/backend-alarm.md#%E8%A7%84%E5%88%99&#34;&gt;告警规则&lt;/a&gt;，进行自定义。&lt;/p&gt;
&lt;p&gt;在满足 SkyWalking 告警规则的触发规则时，我们在 SkyWaling UI 的告警界面，可以看到告警内容。如下图所示：&lt;img src=&#34;2017-01-01_06.png&#34; alt=&#34;SkyWaling UI 界面 —— 告警&#34;&gt;&lt;/p&gt;
&lt;p&gt;同时，我们自定义 &lt;a href=&#34;https://github.com/SkyAPM/document-cn-translation-of-skywalking/blob/master/docs/zh/master/setup/backend/backend-alarm.md#webhook&#34;&gt;Webhook&lt;/a&gt; ，对接 SkyWalking 的告警请求。而具体的邮箱、钉钉等告警方式，需要自己进行开发。至于自定义 WebHook 如何实现，可以参考：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Java 语言：
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Fight/Distributed-tracking-system-based-on-SkyWalking-abnormal-alert/?self&#34;&gt;《基于 SkyWalking 的分布式跟踪系统 - 异常告警》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;Go 语言：
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yanmaipian/dingding-notify-for-skywalking&#34;&gt;dingding-notify-for-skywalking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/weiqiang333/infra-skywalking-webhook&#34;&gt;infra-skywalking-webhook&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;5-注意事项&#34;&gt;5. 注意事项&lt;/h1&gt;
&lt;h2 id=&#34;51-hostname-配置&#34;&gt;5.1 hostname 配置&lt;/h2&gt;
&lt;p&gt;在 SkyWalking 中，每个被监控的实例的名字，会包含 hostname 。格式为：&lt;code&gt;{agent_name}-pid:{pid}@{hostname}&lt;/code&gt; ，例如说：&lt;code&gt;&amp;quot;scrm-scheduler-pid:27629@iZbp1e2xlyvr7fh67qi59oZ&amp;quot;&lt;/code&gt; 。&lt;/p&gt;
&lt;p&gt;因为有些服务器未正确设置 &lt;code&gt;hostname&lt;/code&gt; ，所以我们一定要去修改，不然都不知道是哪个服务器上的实例（😈 鬼知道 &lt;code&gt;&amp;quot;iZbp1e2xlyvr7fh67qi59oZ&amp;quot;&lt;/code&gt; 一串是哪个服务器啊）。&lt;/p&gt;
&lt;p&gt;修改方式如下：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;1、修改 &lt;code&gt;/etc/hosts&lt;/code&gt; 的 &lt;code&gt;hostname&lt;/code&gt;&lt;/strong&gt; ：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;127.0.0.1 localhost
::1         localhost localhost.localdomain localhost6 localhost6.localdomain6
10.80.62.151 pre-app-01 &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 就是这个，其中 10.80.62.151 是本机内网 IP ，pre-app-01 是 hostname 。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;strong&gt;2、修改本机 &lt;code&gt;hostname&lt;/code&gt;&lt;/strong&gt; ：&lt;/p&gt;
&lt;p&gt;参考 &lt;a href=&#34;https://yq.aliyun.com/articles/427296&#34;&gt;《CentOS7 修改主机名（hostname）》&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Bash&#34; data-lang=&#34;Bash&#34;&gt;$ hostname pre-app-01 &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 其中 pre-app-01 就是你希望的 hostname 。&lt;/span&gt;

$ hostnamectl set-hostname pre-app-01 &lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# 其中 pre-app-01 就是你希望的 hostname 。&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h1 id=&#34;6-spring-boot-使用示例&#34;&gt;6. Spring Boot 使用示例&lt;/h1&gt;
&lt;p&gt;在 &lt;a href=&#34;http://www.iocoder.cn/Spring-Boot/SkyWalking/?self&#34;&gt;《芋道 Spring Boot 链路追踪 SkyWalking 入门》&lt;/a&gt; 中，我们来详细学习如何在 Spring Boot 中，整合并使用 SkyWalking 收集链路数据。😈 相比&lt;a href=&#34;#&#34;&gt;「2.5 SkyWaling Agent」&lt;/a&gt;来说，我们会提供更加丰富的示例哟。&lt;/p&gt;
&lt;h1 id=&#34;7-spring-cloud-使用示例&#34;&gt;7. Spring Cloud 使用示例&lt;/h1&gt;
&lt;p&gt;在 &lt;a href=&#34;http://www.iocoder.cn/Spring-Cloud/SkyWalking/?self&#34;&gt;《芋道 Spring Cloud 链路追踪 SkyWalking 入门》&lt;/a&gt; 中，我们来详细学习如何在 Spring Cloud 中，整合并使用 SkyWalking 收集链路数据。😈 相比&lt;a href=&#34;#&#34;&gt;「2.5 SkyWaling Agent」&lt;/a&gt;来说，我们会提供更加丰富的示例哟。&lt;/p&gt;
&lt;h1 id=&#34;666-彩蛋&#34;&gt;666. 彩蛋&lt;/h1&gt;
&lt;p&gt;本文仅仅是简单的 SkyWalking 入门文章，如果胖友想要更好的使用 SkyWalking，推荐通读下&lt;a href=&#34;https://github.com/SkyAPM/document-cn-translation-of-skywalking&#34;&gt;《SkyWalking 文档》&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;想要进一步深入的胖友，也可以阅读如下资料：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/categories/SkyWalking/?self&#34;&gt;《SkyWalking 源码解析》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/Fight/APM-Apache-Skywalking-and-Pinpoint/?self&#34;&gt;《APM 巅峰对决：Apache Skywalking P.K. Pinpoint》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://skywalking.apache.org/zh/blog/&#34;&gt;《SkyWalking 官方 —— 博客合集》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;😈 最后弱弱的问一句，上完 SkyWaling 之后，有没发现自己系统各种地方慢慢慢！嘻嘻。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Zh: 使用 chart 部署 SkyWalking</title>
      <link>/zh/2019-10-08-how-to-use-sw-chart/</link>
      <pubDate>Tue, 08 Oct 2019 00:00:00 +0000</pubDate>
      
      <guid>/zh/2019-10-08-how-to-use-sw-chart/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;作者：innerpeacez&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ipzgo.top/2019-10-08-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-helm-chart-%E9%83%A8%E7%BD%B2-skywalking/&#34;&gt;原文地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本文主要讲述的是如何使用 Helm Charts  将 SkyWalking 部署到 Kubernetes 集群中，相关文档可以参考&lt;a href=&#34;https://github.com/apache/skywalking-kubernetes&#34;&gt;skywalking-kubernetes &lt;/a&gt;和 &lt;a href=&#34;https://github.com/apache/skywalking/blob/master/docs/en/setup/backend/backend-k8s.md&#34;&gt;backend-k8s 文档&lt;/a&gt; 。&lt;/p&gt;
&lt;p&gt;目前推荐的四种方式：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;使用 helm 2 提供的 helm serve 启动本地 helm repo&lt;/li&gt;
&lt;li&gt;使用本地 chart 文件部署&lt;/li&gt;
&lt;li&gt;使用 harbor 提供的 repo 功能&lt;/li&gt;
&lt;li&gt;直接从官方 repo 进行部署&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：目前 skywalking 的 chart 还没有提交到官方仓库，请先参照前三种方式进行部署&lt;/p&gt;
&lt;h4 id=&#34;helm-2-提供的-helm-serve&#34;&gt;Helm 2 提供的 helm serve&lt;/h4&gt;
&lt;h5 id=&#34;打包对应版本的-skywalking-chart&#34;&gt;&lt;strong&gt;打包对应版本的 skywalking chart&lt;/strong&gt;&lt;/h5&gt;
&lt;p&gt;1.配置 helm 环境，&lt;a href=&#34;https://ipzgo.top/2019-07-26-Windows-%E4%BD%BF%E7%94%A8-helm3-%E5%92%8C-kubectl/&#34;&gt;参考 Helm 环境配置&lt;/a&gt; ，如果你要部署 helm2 相关 chart 可以直接配置 helm2 的相关环境&lt;/p&gt;
&lt;p&gt;2.克隆/下载ZIP &lt;a href=&#34;https://github.com/apache/skywalking-kubernetes&#34;&gt;&lt;strong&gt;skywalking-kubernetes&lt;/strong&gt;&lt;/a&gt; 这个仓库，仓库关于chart的目录结构如下&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;helm-chart&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;helm2
&lt;ul&gt;
&lt;li&gt;6.0.0-GA&lt;/li&gt;
&lt;li&gt;6.1.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;helm3
&lt;ul&gt;
&lt;li&gt;6.3.0&lt;/li&gt;
&lt;li&gt;6.4.0&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;克隆/下载ZIP 完成后进入指定目录打包对应版本的chart&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;cd&lt;/span&gt; skywalking-kubernetes/helm-chart/&amp;lt;helm-version&amp;gt;/&amp;lt;skywalking-version&amp;gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意：helm-version 为对应的 helm 版本目录，skywalking-version 为对应的 skywalking 版本目录，下面以helm3 和 skywalking 6.3.0 为例&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;cd&lt;/span&gt; skywalking-kubernetes/helm-chart/helm3/6.3.0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;3.由于skywalking 依赖 elasticsearch 作为存储库，执行以下命令更新依赖，默认会从官方repo进行拉取&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;helm dep up skywalking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Hang tight while we grab the latest from your chart repositories&amp;hellip;
&amp;hellip;Successfully got an update from the &amp;ldquo;stable&amp;rdquo; chart repository
Update Complete. ⎈Happy Helming!⎈
Saving 1 charts
Downloading elasticsearch from repo &lt;a href=&#34;https://kubernetes-charts.storage.googleapis.com/&#34;&gt;https://kubernetes-charts.storage.googleapis.com/&lt;/a&gt;
Deleting outdated charts&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果官方 repo 不存在，请先添加官方仓库&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;helm repo add stable https://kubernetes-charts.storage.googleapis.com
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;&amp;ldquo;stable&amp;rdquo; has been added to your repositories&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;4.打包 skywalking , 执行以下命令&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;helm package skywalking/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;Successfully packaged chart and saved it to: C:\code\innerpeacez_github\skywalking-kubernetes\helm-chart\helm3\6.3.0\skywalking-0.1.0.tgz&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;打包完成后会在当前目录的同级目录生成 .tgz 文件&lt;/p&gt;
&lt;pre&gt;&lt;code&gt; ls
&lt;/code&gt;&lt;/pre&gt;&lt;blockquote&gt;
&lt;p&gt;skywalking/  skywalking-0.1.0.tgz&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h5 id=&#34;启动-helm-serve&#34;&gt;启动 helm serve&lt;/h5&gt;
&lt;p&gt;由于上文配置的 helm 为 helm3 ,但是 helm 3中移除了 helm serve 的相关命令，所以需要另外一个环境配置helm2 的相关环境，&lt;a href=&#34;https://github.com/helm/helm/releases/tag/v2.14.3&#34;&gt;下载 helm 2.14.3 的二进制文件&lt;/a&gt;，配置基本上没有大的差别，不在赘述&lt;/p&gt;
&lt;p&gt;初始化 helm&lt;/p&gt;
&lt;pre&gt;&lt;code class=&#34;language-shelm&#34; data-lang=&#34;shelm&#34;&gt;helm init
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;将上文生成的 &lt;strong&gt;skywalking-0.1.0.tgz&lt;/strong&gt; 文件复制到 helm 相关目录 &lt;code&gt;/root/.helm/repository/local&lt;/code&gt;,启动 serve&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;helm serve --address &amp;lt;ip&amp;gt;:8879 --repo-path /root/.helm/repository/local
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;注意： ip 为要能够被上文配置 helm 3 环境的机器访问到&lt;/p&gt;
&lt;p&gt;可以访问一下看看服务 serve 是否启动成功&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;curl ip:8879
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h5 id=&#34;部署-skywalking&#34;&gt;部署 skywalking&lt;/h5&gt;
&lt;p&gt;1.在helm3 环境中添加启动的本地 repo&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;helm repo add &lt;span style=&#34;color:#0086b3&#34;&gt;local&lt;/span&gt; http://&amp;lt;ip&amp;gt;:8879
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;2.查看 skywalking chart 是否存在于本地仓库中&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;helm search skywalking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;blockquote&gt;
&lt;p&gt;NAME             	CHART VERSION	APP VERSION	DESCRIPTION              &lt;br&gt;
local/skywalking 	0.1.0        	6.3.0      	Apache SkyWalking APM System&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;3.部署&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;helm -n &lt;span style=&#34;color:#0086b3&#34;&gt;test&lt;/span&gt; install skywalking local/skywalking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;这样 skywalking 就部署到了 k8s 集群中的 test 命名空间了，至此本地安装skywalking 就完成了。&lt;/p&gt;
&lt;h4 id=&#34;本地文件部署&#34;&gt;本地文件部署&lt;/h4&gt;
&lt;p&gt;如果你不想存储到 chart 到仓库中也可以直接使用本地文件部署 skywalking,按照上面的步骤将skywalking chart 打包完成之后，直接使用以下命令进行部署&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;helm -n &lt;span style=&#34;color:#0086b3&#34;&gt;test&lt;/span&gt; install skywalking skywalking-0.1.0.tgz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h4 id=&#34;harbor-作为-repo-存储-charts&#34;&gt;harbor 作为 repo 存储 charts&lt;/h4&gt;
&lt;p&gt;harbor 目前已经提供了，charts repo 的能力，这样就可以将 docker 镜像和 chart 存储在一个仓库中了，方便维护，具体harbor 的部署方法参考 &lt;a href=&#34;https://ipzgo.top/2019-07-26-Helm-3-%E4%BD%BF%E7%94%A8-harbor-%E4%BD%9C%E4%B8%BA%E4%BB%93%E5%BA%93%E5%AD%98%E5%82%A8-charts/&#34;&gt;Harbor 作为存储仓库存储 chart&lt;/a&gt;&lt;/p&gt;
&lt;h4 id=&#34;官方-repo-部署&#34;&gt;官方 repo 部署&lt;/h4&gt;
&lt;p&gt;目前没有发布到官方 repo 中，后续发布完成后，只需要执行下面命令即可&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;helm install -n &lt;span style=&#34;color:#0086b3&#34;&gt;test&lt;/span&gt; stable/skywalking
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;总结&#34;&gt;总结&lt;/h3&gt;
&lt;p&gt;四种方式都可以进行部署，如果你想要自定义 chart ,需要使用上述两种本地方法及 harbor 存储的方式，以便你修改好 chart 之后进行部署.&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Zh: 如何使用 SkyWalking Agent ？</title>
      <link>/zh/2019-08-30-how-to-use-skywalking-agent/</link>
      <pubDate>Fri, 30 Aug 2019 00:00:00 +0000</pubDate>
      
      <guid>/zh/2019-08-30-how-to-use-skywalking-agent/</guid>
      <description>
        
        
        &lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;作者：innerpeacez&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://ipzgo.top/2019-08-30-%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Skywalking-Agent/&#34;&gt;原文地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果你还不知道 Skywalking agent 是什么，&lt;a href=&#34;https://github.com/apache/skywalking/blob/master/docs/en/concepts-and-designs/README.md&#34;&gt;请点击这里查看 Probe&lt;/a&gt; 或者&lt;a href=&#34;https://github.com/apache/skywalking/blob/master/docs/en/setup/service-agent/java-agent/README.md&#34;&gt;这里查看快速了解agent&lt;/a&gt;,由于我这边大部分都是 JAVA 服务，所以下文以 Java 中使用 agent 为例，提供了以下三种方式供你选择&lt;/p&gt;
&lt;h4 id=&#34;三种方式&#34;&gt;三种方式：&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;使用官方提供的基础镜像&lt;/li&gt;
&lt;li&gt;将 agent 包构建到已经存在的基础镜像中&lt;/li&gt;
&lt;li&gt;sidecar 模式挂载 agent&lt;/li&gt;
&lt;/ul&gt;
&lt;h5 id=&#34;1使用官方提供的基础镜像&#34;&gt;1.使用官方提供的基础镜像&lt;/h5&gt;
&lt;p&gt;查看官方 docker hub 提供的&lt;a href=&#34;https://hub.docker.com/r/apache/skywalking-base&#34;&gt;基础镜像&lt;/a&gt;，只需要在你构建服务镜像是 From 这个镜像即可，直接集成到 Jenkins 中可以更加方便&lt;/p&gt;
&lt;h5 id=&#34;2将-agent-包构建到已经存在的基础镜像中&#34;&gt;2.将 agent 包构建到已经存在的基础镜像中&lt;/h5&gt;
&lt;p&gt;提供这种方式的原因是：官方的镜像属于精简镜像，并且是 openjdk ，可能很多命令没有，需要自己二次安装，以下是我构建的过程&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;下载 oracle jdk&lt;/p&gt;
&lt;p&gt;这个现在 oracle 有点恶心了，wget 各种不行，然后我放弃了，直接从&lt;a href=&#34;https://www.oracle.com/technetwork/java/javase/downloads/jdk8-downloads-2133151.html&#34;&gt;官网&lt;/a&gt;下载了&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;下载 skywalking &lt;a href=&#34;https://www.apache.org/dyn/closer.cgi/skywalking/6.3.0/apache-skywalking-apm-6.3.0.tar.gz&#34;&gt;官方发行包&lt;/a&gt;，并解压（以6.3.0为例）&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wget https://www.apache.org/dyn/closer.cgi/skywalking/6.3.0/apache-skywalking-apm-6.3.0.tar.gz &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar -zxvf apache-skywalking-apm-6.3.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过以下 dockerfile 构建基础镜像&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt; alpine:3.8 &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;ENV&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;LANG&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;C.UTF-8&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;set&lt;/span&gt; -eux &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;  apk update &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apk upgrade &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;  wget -q -O /etc/apk/keys/sgerrand.rsa.pub https://alpine-pkgs.sgerrand.com/sgerrand.rsa.pub &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;        wget https://github.com/sgerrand/alpine-pkg-glibc/releases/download/2.30-r0/glibc-2.30-r0.apk &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;        apk --no-cache add unzip vim curl git bash ca-certificates glibc-2.30-r0.apk file &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;  rm -rf /var/lib/apk/* &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&lt;/span&gt;        mkdir -p /usr/skywalking/agent/&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# A streamlined jre&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;ADD&lt;/span&gt; jdk1.8.0_221/ /usr/java/jdk1.8.0_221/&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;ADD&lt;/span&gt; apache-skywalking-apm-bin/agent/ /usr/skywalking/agent/&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# set env&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;ENV&lt;/span&gt; JAVA_HOME /usr/java/jdk1.8.0_221&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;ENV&lt;/span&gt; PATH &lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;PATH&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;:&lt;span style=&#34;color:#d14&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;JAVA_HOME&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;}&lt;/span&gt;/bin&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#998;font-style:italic&#34;&gt;# run container with base path:/&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt; /&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;CMD&lt;/span&gt; bash&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里由于 alpine 是基于mini lib 的，但是 java 需要 glibc ,所以加入了 glibc 相关的东西，最后构建出的镜像大小在 490M 左右，因为加了挺多命令还是有点大，仅供参考，同样构建出的镜像也可以直接配置到 jenkins 中。&lt;/p&gt;
&lt;h5 id=&#34;3sidecar-模式挂载-agent&#34;&gt;3.sidecar 模式挂载 agent&lt;/h5&gt;
&lt;p&gt;如果你们的服务是部署在 Kubernetes 中，你还可以使用这种方式来使用 Skywalking Agent ,这种方式的好处在与不需要修改原来的基础镜像，也不用重新构建新的服务镜像，而是以sidecar 模式，通过共享volume的方式将agent 所需的相关文件挂载到已经存在的服务镜像中&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;构建 skywalking agent sidecar 镜像的方法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;下载skywalking &lt;a href=&#34;https://www.apache.org/dyn/closer.cgi/skywalking/6.3.0/apache-skywalking-apm-6.3.0.tar.gz&#34;&gt;官方发行包&lt;/a&gt;，并解压&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;wget https://www.apache.org/dyn/closer.cgi/skywalking/6.3.0/apache-skywalking-apm-6.3.0.tar.gz &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; tar -zxvf apache-skywalking-apm-6.3.0.tar.gz
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;通过以下 dockerfile 进行构建&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-dockerfile&#34; data-lang=&#34;dockerfile&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt; busybox:latest &lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;ENV&lt;/span&gt; &lt;span style=&#34;color:#008080&#34;&gt;LANG&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt;C.UTF-8&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;RUN&lt;/span&gt; &lt;span style=&#34;color:#0086b3&#34;&gt;set&lt;/span&gt; -eux &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; mkdir -p /usr/skywalking/agent/&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;ADD&lt;/span&gt; apache-skywalking-apm-bin/agent/ /usr/skywalking/agent/&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt; /&lt;/span&gt;&lt;span style=&#34;color:#a61717;background-color:#e3d2d2&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：这里我没有在dockerfile中下载skywalking 发行包是因为保证构建出的 sidecar 镜像保持最小，bosybox 只有700 k左右，加上 agent 最后大小小于20M&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;如何使用 sidecar 呢？&lt;/strong&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span style=&#34;color:#000080&#34;&gt;apiVersion&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;apps/v1&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;kind&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;Deployment&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;demo-sw&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;demo-sw&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;replicas&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;selector&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;matchLabels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;demo-sw&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;  &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;template&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;metadata&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;labels&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;demo-sw&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;    &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;spec&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;initContainers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;innerpeacez/sw-agent-sidecar:latest&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;sw-agent-sidecar&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;imagePullPolicy&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;IfNotPresent&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;command&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;sh&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;args&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;[&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;-c&amp;#39;&lt;/span&gt;,&lt;span style=&#34;color:#d14&#34;&gt;&amp;#39;mkdir -p /skywalking/agent &amp;amp;&amp;amp; cp -r /usr/skywalking/agent/* /skywalking/agent&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;volumeMounts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;mountPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/skywalking/agent&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;sw-agent&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;containers&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;image&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;nginx:1.7.9&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;nginx&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;volumeMounts&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;mountPath&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;/usr/skywalking/agent&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;          &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;sw-agent&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;ports&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;containerPort&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color:#099&#34;&gt;80&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;volumes&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;      &lt;/span&gt;- &lt;span style=&#34;color:#000080&#34;&gt;name&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;sw-agent&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#bbb&#34;&gt;        &lt;/span&gt;&lt;span style=&#34;color:#000080&#34;&gt;emptyDir&lt;/span&gt;:&lt;span style=&#34;color:#bbb&#34;&gt; &lt;/span&gt;{}&lt;span style=&#34;color:#bbb&#34;&gt;
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以上是挂载 sidecar 的 deployment.yaml 文件，以nginx 作为服务为例，主要是通过共享 volume 的方式挂载 agent，首先 initContainers 通过 sw-agent 卷挂载了 sw-agent-sidecar 中的 /skywalking/agent ，并且将上面构建好的镜像中的 agent 目录 cp 到了 /skywalking/agent 目录，完成之后 nginx 启动时也挂载了 sw-agent 卷，并将其挂载到了容器的 /usr/skywalking/agent 目录，这样就完成了共享过程。&lt;/p&gt;
&lt;h4 id=&#34;总结&#34;&gt;总结&lt;/h4&gt;
&lt;p&gt;这样除去 ServiceMesh 以外，我能想到的方式就介绍完了，希望可以帮助到你。最后给 &lt;a href=&#34;https://github.com/apache/skywalking&#34;&gt;Skywalking 一个 Star 吧&lt;/a&gt;，国人的骄傲。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Zh: SkyWalking的远程调试</title>
      <link>/zh/2019-01-24-skywalking-remote-debug/</link>
      <pubDate>Thu, 24 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/zh/2019-01-24-skywalking-remote-debug/</guid>
      <description>
        
        
        &lt;p&gt;ps:本文仅写给菜鸟，以及不知道如何远程调试的程序员，并且仅仅适用skywalking的远程调试&lt;/p&gt;
&lt;h2 id=&#34;概述&#34;&gt;概述&lt;/h2&gt;
&lt;p&gt;远程调试的目的是为了解决代码或者说程序包部署在服务器上运行，只能通过log来查看问题，以及不能跟在本地IDE运行debug那样查找问题，观看程序运行流程&amp;hellip;
想想当你的程序运行在服务器上，你在本地的IDE随时debug，是不是很爽的感觉。&lt;/p&gt;
&lt;p&gt;好了不废话，切入正题。&lt;/p&gt;
&lt;h2 id=&#34;环境篇&#34;&gt;环境篇&lt;/h2&gt;
&lt;p&gt;IDE：推荐 &lt;a href=&#34;https://www.jetbrains.com/idea/&#34;&gt;IntelliJ IDEA&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;开发语言: 本文仅限于java，其他语言请自行询问google爸爸或者baidu娘娘&lt;/p&gt;
&lt;p&gt;源代码：自行从github下载，并且确保你运行的skywalking包也源代码的一致，（也就是说你自己从源代码编译打包运行，虽然不一样也可以调试，但是你想想你在本地开发，更改完代码，没有重新运行，debug出现的诡异情况）&lt;/p&gt;
&lt;h2 id=&#34;场景篇&#34;&gt;场景篇&lt;/h2&gt;
&lt;p&gt;假定有如下三台机器&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;IP&lt;/th&gt;
&lt;th style=&#34;text-align:center&#34;&gt;用途&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;10.193.78.1&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;oap-server&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;skywalking 的oap服务（或者说collector所在的服务器）&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10.193.78.2&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;agent&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;skywalking agent运行所在的服务器&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;10.193.78.0&lt;/td&gt;
&lt;td style=&#34;text-align:center&#34;&gt;IDE&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;你自己装IDE也就是IntelliJ IDEA的机器&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;以上环境，场景请自行安装好，并确认正常运行。本文不在赘述&lt;/p&gt;
&lt;p&gt;废话终于说完了&lt;/p&gt;
&lt;h2 id=&#34;操作篇&#34;&gt;操作篇&lt;/h2&gt;
&lt;p&gt;首要条件，下载源码后，先用maven 打包编译。然后使用Idea打开源码的父目录，整体结构大致如下图
&lt;img src=&#34;0081Kckwly1gkl4h16jepj30u00ui0wk.jpg&#34; alt=&#34;IMAGE&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;1-agent调试&#34;&gt;1 :agent调试&lt;/h3&gt;
&lt;h4 id=&#34;1idea-配置部分&#34;&gt;1)Idea 配置部分&lt;/h4&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl4gsba9dj32m803k40w.jpg&#34; alt=&#34;IMAGE&#34;&gt;
点击Edit Configurations
在弹出窗口中依次找到（红色线框的部分）并点击
&lt;img src=&#34;0081Kckwly1gkl4gxw1u0j319s0c8mzm.jpg&#34; alt=&#34;IMAGE&#34;&gt;
&lt;img src=&#34;0081Kckwly1gkl4gsox3jj30ek10gadm.jpg&#34; alt=&#34;IMAGE&#34;&gt;
打开的界面如下
&lt;img src=&#34;0081Kckwly1gkl4gt601gj31cp0u0gsh.jpg&#34; alt=&#34;IMAGE&#34;&gt;&lt;/p&gt;
&lt;p&gt;修改Name值，自己随意，好记即可
然后Host输入10.193.78.2 Port默认或者其他的，重要的是这个端口在10.193.78.2上没有被占用&lt;/p&gt;
&lt;p&gt;然后找到Use module classpath 选择 apm-agent
最终的结果如下：
&lt;img src=&#34;0081Kckwly1gkl4h0pw50j30yu0u0jxk.jpg&#34; alt=&#34;IMAGE&#34;&gt;&lt;/p&gt;
&lt;p&gt;注意选择目标agent运行的jdk版本，很重要&lt;/p&gt;
&lt;p&gt;然后点击Apply，并找到如下内容，并且复制待用
&lt;img src=&#34;0081Kckwly1gkl4gytahmj30y50u0wka.jpg&#34; alt=&#34;IMAGE&#34;&gt;&lt;/p&gt;
&lt;h4 id=&#34;2agent配置部分&#34;&gt;2）agent配置部分&lt;/h4&gt;
&lt;p&gt;找到agent配置的脚本，并打开，找到配置agent的地方，
&lt;img src=&#34;0081Kckwly1gkl4h05q0uj30ji016q3a.jpg&#34; alt=&#34;IMAGE&#34;&gt;
就这个地方，在这个后边加上刚才复制的内容
最终的结果如下
&lt;img src=&#34;0081Kckwly1gkl4gz8kowj31e000uaav.jpg&#34; alt=&#34;IMAGE&#34;&gt;
提供一个我配置的weblogic的配置（仅供参考）
&lt;img src=&#34;0081Kckwly1gkl4gyfw8lj31r6020abk.jpg&#34; alt=&#34;IMAGE&#34;&gt;
然后重启应用（agent）&lt;/p&gt;
&lt;h4 id=&#34;3调试&#34;&gt;3）调试&lt;/h4&gt;
&lt;p&gt;回到Idea中找到这个地方，并点击debug按钮，你没看错，就是红色圈住的地方
&lt;img src=&#34;0081Kckwly1gkl4gun36lj30ew01mmxa.jpg&#34; alt=&#34;IMAGE&#34;&gt;
然后控制台如果出现以下字样：
&lt;img src=&#34;0081Kckwly1gkl4gzq0t3j30y40123z2.jpg&#34; alt=&#34;IMAGE&#34;&gt;
那么恭喜你，可以愉快的加断点调试了。
ps:需要注意的是agent的、
service instance的注册可能不能那么愉快的调试。因为这个注册比较快，而且是在agent启动的时候就发生的，
而远程调试也需要agent打开后才可以调试，所以，如果你手快当我没说这句话。&lt;/p&gt;
&lt;h3 id=&#34;2-oap-server的调试也就是collector的调试&#34;&gt;2 :oap-server的调试（也就是collector的调试）&lt;/h3&gt;
&lt;p&gt;具体过程不在赘述，和上一步的agent调试大同小异，不同的是
Use module classpath需要选择oap-server&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl4gxeoh7j319g03amxr.jpg&#34; alt=&#34;IMAGE&#34;&gt;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Zh: SkyWalking Java 插件贡献实践</title>
      <link>/zh/2019-01-21-agent-plugin-practice/</link>
      <pubDate>Mon, 21 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/zh/2019-01-21-agent-plugin-practice/</guid>
      <description>
        
        
        &lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;《SkyWalking Java 插件贡献实践》：本文将基于SkyWalking 6.0.0-GA-SNAPSHOT版本，以编写Redis客户端&lt;a href=&#34;#Lettuce&#34;&gt;&lt;code&gt;Lettuce&lt;/code&gt;&lt;/a&gt;的SkyWalking Java Agent 插件为例，与大家分享我贡献PR的过程，希望对大家了解SkyWalking Java Agent插件有所帮助。&lt;/p&gt;
&lt;h2 id=&#34;基础概念&#34;&gt;基础概念&lt;/h2&gt;
&lt;p&gt;&lt;a href=&#34;#OpenTracing&#34;&gt;&lt;code&gt;OpenTracing&lt;/code&gt;&lt;/a&gt;和SkyWalking链路模块几个很重要的语义概念。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Span:可理解为一次方法调用，一个程序块的调用，或一次RPC/数据库访问。只要是一个具有完整时间周期的程序访问，都可以被认为是一个span。SkyWalking &lt;a href=&#34;#AbstractSpan&#34;&gt;&lt;code&gt;Span&lt;/code&gt;&lt;/a&gt;对象中的重要属性&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&#34;text-align:left&#34;&gt;属性&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;名称&lt;/th&gt;
&lt;th style=&#34;text-align:left&#34;&gt;备注&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;component&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;组件&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;插件的组件名称，如：Lettuce，详见:ComponentsDefine.Class。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;tag&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;标签&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;k-v结构，关键标签，key详见：Tags.Class。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;peer&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;对端资源&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;用于拓扑图，若DB组件，需记录集群信息。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;operationName&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;操作名称&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;若span=0，operationName将会搜索的下拉列表。&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&#34;text-align:left&#34;&gt;layer&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;显示&lt;/td&gt;
&lt;td style=&#34;text-align:left&#34;&gt;在链路页显示，详见SpanLayer.Class。&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trace:调用链，通过归属于其的Span来隐性的定义。一条Trace可被认为是一个由多个Span组成的有向无环图（DAG图），在SkyWalking链路模块你可以看到，Trace又由多个归属于其的trace segment组成。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Trace segment:Segment是SkyWalking中的一个概念，它应该包括单个OS进程中每个请求的所有范围，通常是基于语言的单线程。由多个归属于本线程操作的Span组成。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;核心api&#34;&gt;核心API&lt;/h2&gt;
&lt;h3 id=&#34;跨进程contextcarrier核心api&#34;&gt;跨进程ContextCarrier核心API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;为了实现分布式跟踪，需要绑定跨进程的跟踪，并且应该传播上下文 整个过程。 这就是ContextCarrier的职责。&lt;/li&gt;
&lt;li&gt;以下是实现有关跨进程传播的步骤：
&lt;ul&gt;
&lt;li&gt;在客户端，创建一个新的空的ContextCarrier，将ContextCarrier所有信息放到HTTP heads、Dubbo attachments 或者Kafka messages。&lt;/li&gt;
&lt;li&gt;通过服务调用，将ContextCarrier传递到服务端。&lt;/li&gt;
&lt;li&gt;在服务端，在对应组件的heads、attachments或messages获取ContextCarrier所有消息。将服务端和客户端的链路信息绑定。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&#34;跨线程contextsnapshot核心api&#34;&gt;跨线程ContextSnapshot核心API&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;除了跨进程，跨线程也是需要支持的，例如异步线程（内存中的消息队列）和批处理在Java中很常见，跨进程和跨线程十分相似，因为都是需要传播 上下文。 唯一的区别是，不需要跨线程序列化。&lt;/li&gt;
&lt;li&gt;以下是实现有关跨线程传播的步骤：
&lt;ul&gt;
&lt;li&gt;使用ContextManager＃capture获取ContextSnapshot对象。&lt;/li&gt;
&lt;li&gt;让子线程以任何方式，通过方法参数或由现有参数携带来访问ContextSnapshot。&lt;/li&gt;
&lt;li&gt;在子线程中使用ContextManager#continued。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;详尽的核心API相关知识，可点击阅读 《&lt;a href=&#34;https://github.com/apache/incubator-skywalking/blob/master/docs/others/cn/guides/Java-Plugin-Development-Guide.md&#34;&gt;插件开发指南-中文版本&lt;/a&gt;》&lt;/p&gt;
&lt;h2 id=&#34;插件实践&#34;&gt;插件实践&lt;/h2&gt;
&lt;h3 id=&#34;lettuce操作redis代码&#34;&gt;Lettuce操作redis代码&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@PostMapping&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;/ping&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ping&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;HttpServletRequest request&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;throws&lt;/span&gt; ExecutionException&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; InterruptedException &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    RedisClient redisClient &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; RedisClient&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;redis://&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;127.0.0.1&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;:6379&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    StatefulRedisConnection&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; connection0 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; redisClient&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;connect&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
    RedisAsyncCommands&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; asyncCommands0 &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; connection0&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;async&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
    AsyncCommand&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; future &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;AsyncCommand&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;)&lt;/span&gt;asyncCommands0&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;set&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;key_a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;value_a&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    future&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;onComplete&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;s &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; OkHttpClient&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;http://skywalking.apache.org&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
    future&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
    connection0&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;close&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
    redisClient&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;shutdown&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;插件源码架构&#34;&gt;插件源码架构&lt;/h3&gt;
&lt;p&gt;Lettuce对Redis封装与Redisson &lt;a href=&#34;#Redisson&#34;&gt;&lt;code&gt;Redisson&lt;/code&gt;&lt;/a&gt; 类似，目的均是实现简单易用，且无学习曲线的Java的Redis客户端。所以要是先对Redis操作的拦截，需要学习对应客户端的源码。&lt;/p&gt;
&lt;h3 id=&#34;设计插件&#34;&gt;设计插件&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl4eg1vz5j30vp0gbgn0.jpg&#34; alt=&#34;Lettuce时序图&#34;&gt;
理解插件实现过程，找到最佳InterceptPoint位置是实现插件融入SkyWalking的核心所在。&lt;/p&gt;
&lt;h3 id=&#34;代码实现&#34;&gt;代码实现&lt;/h3&gt;
&lt;p&gt;PR的url：&lt;a href=&#34;https://github.com/apache/incubator-skywalking/pull/2152&#34;&gt;Support lettuce plugin&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&#34;实践中遇到的问题&#34;&gt;实践中遇到的问题&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;多线程编程使用debug断点会将链路变成同步，建议使用run模式增加log，或者远程debug来解决。&lt;/li&gt;
&lt;li&gt;多线程编程，需要使用跨线程ContextSnapshot核心API，否则链路会断裂。&lt;/li&gt;
&lt;li&gt;CompleteableCommand.onComplete方法有时会同步执行，这个和内部机制有关，有时候不分离线程。&lt;/li&gt;
&lt;li&gt;插件编译版本若为1.7+，需要将插件放到可选插件中。因为sniffer支持的版本是1.6。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;插件兼容&#34;&gt;插件兼容&lt;/h2&gt;
&lt;p&gt;为了插件得到插件最终的兼容兼容版本，我们需要使用docker对所有插件版本的测试，具体步骤如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;编写测试用例：关于如何编写测试用例，请按照&lt;a href=&#34;https://github.com/SkywalkingTest/skywalking-agent-testcases/blob/master/docs/how-to-write-a-plugin-testcase.md&#34;&gt;如何编写文档&lt;/a&gt;来实现。&lt;/li&gt;
&lt;li&gt;提供自动测试用例。 如：&lt;a href=&#34;https://github.com/SkywalkingTest/skywalking-agent-testcases/pull/45&#34;&gt;Redisson插件testcase&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;确保本地几个流行的插件版本，在本地运行起来是和自己的预期是一致的。&lt;/li&gt;
&lt;li&gt;在提供自动测试用例并在CI中递交测试后，插件提交者会批准您的插件。&lt;/li&gt;
&lt;li&gt;最终得到完整的插件测试报告。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;pull-request&#34;&gt;Pull Request&lt;/h2&gt;
&lt;h3 id=&#34;提交pr&#34;&gt;提交PR&lt;/h3&gt;
&lt;p&gt;提交PR的时候，需要简述自己对插件的设计，这样有助于与社区的贡献者讨论完成codereview。&lt;/p&gt;
&lt;h3 id=&#34;申请自动化测试&#34;&gt;申请自动化测试&lt;/h3&gt;
&lt;p&gt;测试用例编写完成后，可以申请自动化测试，在自己的PR中会生成插件兼容版本的报告。&lt;/p&gt;
&lt;h3 id=&#34;插件文档&#34;&gt;插件文档&lt;/h3&gt;
&lt;p&gt;插件文档需要更新：&lt;a href=&#34;https://github.com/apache/incubator-skywalking/blob/master/docs/en/setup/service-agent/java-agent/Supported-list.md&#34;&gt;Supported-list.md&lt;/a&gt;相关插件信息的支持。&lt;/p&gt;
&lt;p&gt;插件如果为可选插件需要在&lt;a href=&#34;https://github.com/apache/incubator-skywalking/tree/master/docs/en/setup/service-agent/java-agent/agent-optional-plugins&#34;&gt;agent-optional-plugins&lt;/a&gt;可选插件文档中增加对应的描述。&lt;/p&gt;
&lt;h2 id=&#34;注释&#34;&gt;注释&lt;/h2&gt;
&lt;p&gt;&lt;a name=&#34;Lettuce&#34;&gt;&lt;/a&gt;Lettuce是一个完全无阻塞的Redis客户端，使用netty构建，提供反应，异步和同步数据访问。了解细节可点击阅读 &lt;a href=&#34;https://lettuce.io/&#34;&gt;lettuce.io&lt;/a&gt;;&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;OpenTracing&#34;&gt;&lt;/a&gt;OpenTracing是一个跨编程语言的标准，了解细节可点击阅读 《&lt;a href=&#34;https://github.com/opentracing-contrib/opentracing-specification-zh/blob/master/specification.md&#34;&gt;OpenTracing语义标准&lt;/a&gt;》;&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;AbstractSpan&#34;&gt;&lt;/a&gt;span:org.apache.skywalking.apm.agent.core.context.trace.AbstractSpan接口定义了所有Span实现需要完成的方法;&lt;/p&gt;
&lt;p&gt;&lt;a name=&#34;Redisson&#34;&gt;&lt;/a&gt;Redisson是一个非常易用Java的Redis客户端， 它没有学习曲线，无需知道任何Redis命令即可开始使用它。了解细节可点击阅读 &lt;a href=&#34;https://redisson.org/&#34;&gt;redisson.org&lt;/a&gt;;&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Zh: SkyWalking 微服务监控分析</title>
      <link>/zh/2019-01-03-monitor-microservice/</link>
      <pubDate>Thu, 03 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/zh/2019-01-03-monitor-microservice/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;作者：赵瑞栋&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://mp.weixin.qq.com/s/0XXUpnxR8xiExE4iwu90xg&#34;&gt;原文地址&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;引言&#34;&gt;引言&lt;/h2&gt;
&lt;p&gt;微服务框架落地后，分布式部署架构带来的问题就会迅速凸显出来。服务之间的相互调用过程中，如果业务出现错误或者异常，如何快速定位问题？如何跟踪业务调用链路？如何分析解决业务瓶颈？&amp;hellip;本文我们来看看如何解决以上问题。&lt;/p&gt;
&lt;h2 id=&#34;一skywalking初探&#34;&gt;一、SkyWalking初探&lt;/h2&gt;
&lt;h3 id=&#34;skywalking-简介&#34;&gt;Skywalking 简介&lt;/h3&gt;
&lt;p&gt;Skywalking是一款国内开源的应用性能监控工具，支持对分布式系统的监控、跟踪和诊断。&lt;/p&gt;
&lt;p&gt;它提供了如下的主要功能特性：
&lt;img src=&#34;0081Kckwly1gkl48z91szj30t90hvmyo.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h3 id=&#34;skywalking-技术架构&#34;&gt;Skywalking 技术架构&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl497pc5dj30tw0esabr.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;SW总体可以分为四部分：&lt;/p&gt;
&lt;p&gt;1.Skywalking Agent：使用Javaagent做字节码植入，无侵入式的收集，并通过HTTP或者gRPC方式发送数据到Skywalking Collector。&lt;/p&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;Skywalking Collector ：链路数据收集器，对agent传过来的数据进行整合分析处理并落入相关的数据存储中。&lt;/li&gt;
&lt;li&gt;Storage：Skywalking的存储，时间更迭，sw已经开发迭代到了6.x版本，在6.x版本中支持以ElasticSearch、Mysql、TiDB、H2、作为存储介质进行数据存储。&lt;/li&gt;
&lt;li&gt;UI ：Web可视化平台，用来展示落地的数据。&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;skywalking-agent配置&#34;&gt;Skywalking Agent配置&lt;/h3&gt;
&lt;p&gt;通过了解配置，可以对一个组件功能有一个大致的了解。让我们一起看一下skywalking的相关配置。&lt;/p&gt;
&lt;p&gt;解压开skywalking的压缩包，在agent/config文件夹中可以看到agent的配置文件。&lt;/p&gt;
&lt;p&gt;从skywalking支持环境变量配置加载，在启动的时候优先读取环境变量中的相关配置。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl49air42j30tw0k0tbw.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;agent.namespace: 跨进程链路中的header，不同的namespace会导致跨进程的链路中断&lt;/li&gt;
&lt;li&gt;agent.service_name:一个服务（项目）的唯一标识，这个字段决定了在sw的UI上的关于service的展示名称&lt;/li&gt;
&lt;li&gt;agent.sample_n_per_3_secs: 客户端采样率，默认是-1代表全采样&lt;/li&gt;
&lt;li&gt;agent.authentication: 与collector进行通信的安全认证，需要同collector中配置相同&lt;/li&gt;
&lt;li&gt;agent.ignore_suffix: 忽略特定请求后缀的trace&lt;/li&gt;
&lt;li&gt;collecttor.backend_service: agent需要同collector进行数据传输的IP和端口&lt;/li&gt;
&lt;li&gt;logging.level: agent记录日志级别&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;skywalking agent使用javaagent无侵入式的配合collector实现对分布式系统的追踪和相关数据的上下文传递。&lt;/p&gt;
&lt;h3 id=&#34;skywalking-collector关键配置&#34;&gt;Skywalking Collector关键配置&lt;/h3&gt;
&lt;p&gt;Collector支持集群部署，zookeeper、kubernetes（如果你的应用是部署在容器中的）、consul（GO语言开发的服务发现工具）是sw可选的集群管理工具，结合大家具体的部署方式进行选择。详细配置大家可以去Skywalking官网下载介质包进行了解。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Collector端口设置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl496t7kuj30tu0azabr.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;downsampling: 采样汇总统计维度，会分别按照分钟、【小时、天、月】（可选）来统计各项指标数据。&lt;/li&gt;
&lt;li&gt;通过设置TTL相关配置项可以对数据进行自动清理。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Skywalking 在6.X中简化了配置。collector提供了gRPC和HTTP两种通信方式。&lt;/p&gt;
&lt;p&gt;UI使用rest http通信，agent在大多数场景下使用grpc方式通信，在语言不支持的情况下会使用http通信。&lt;/p&gt;
&lt;p&gt;关于绑定IP和端口需要注意的一点是，通过绑定IP，agent和collector必须配置对应ip才可以正常通信。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Collector存储配置&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;在application.yml中配置的storage模块配置中选择要使用的数据库类型，并填写相关的配置信息。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl48yfewej30u00dm42a.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Collector Receiver&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Receiver是Skywalking在6.x提出的新的概念，负责从被监控的系统中接受指标数据。用户完全可以参照OpenTracing规范来上传自定义的监控数据。Skywalking官方提供了service-mesh、istio、zipkin的相关能力。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl4978f3fj30ty0dz76h.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;现在Skywalking支持服务端采样，配置项为sampleRate，比例采样，如果配置为5000则采样率就是50%。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关于采样设置的一点注意事项&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;关于服务采样配置的一点建议，如果Collector以集群方式部署，比如：Acollector和Bcollector，建议Acollector.sampleRate = Bcollector.sampleRate。如果采样率设置不相同可能会出现数据丢失问题。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl495ce6zj30lm0jqwfm.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;假设Agent端将所有数据发送到后端Collector处，A采样率设置为30%，B采样率为50%。&lt;/p&gt;
&lt;p&gt;假设有30%的数据，发送到A上，这些数据被全部正确接受并存储，极端情况（与期望的采样数据量相同）下，如果剩下20%待采样的数据发送到了B，这个时候一切都是正常的，如果这20%中有一部分数据被送到了A那么，这些数据将是被忽略的，由此就会造成数据丢失。&lt;/p&gt;
&lt;h2 id=&#34;二业务调用链路监控&#34;&gt;二、业务调用链路监控&lt;/h2&gt;
&lt;h3 id=&#34;service-topology监控&#34;&gt;Service Topology监控&lt;/h3&gt;
&lt;p&gt;调用链路监控可以从两个角度去看待。我们先从整体上来认识一下我们所监控的系统。&lt;/p&gt;
&lt;p&gt;通过给服务添加探针并产生实际的调用之后，我们可以通过Skywalking的前端UI查看服务之间的调用关系。&lt;/p&gt;
&lt;p&gt;我们简单模拟一次服务之间的调用。新建两个服务，service-provider以及service-consumer，服务之间简单的通过Feign Client 来模拟远程调用。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl498m9caj30th0e1wfn.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从图中可以看到:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有两个服务节点：provider &amp;amp; consumer&lt;/li&gt;
&lt;li&gt;有一个数据库节点：localhost【mysql】&lt;/li&gt;
&lt;li&gt;一个注册中心节点&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;consumer消费了provider提供出来的接口。&lt;/p&gt;
&lt;p&gt;一个系统的拓扑图让我们清晰的认识到系统之间的应用的依赖关系以及当前状态下的业务流转流程。细心的可能发现图示节点consumer上有一部分是红色的，红色是什么意思呢？&lt;/p&gt;
&lt;p&gt;红色代表当前流经consumer节点的请求有一断时间内是响应异常的。当节点全部变红的时候证明服务现阶段内就彻底不可用了。运维人员可以通过Topology迅速发现某一个服务潜在的问题，并进行下一步的排查并做到预防。&lt;/p&gt;
&lt;h3 id=&#34;skywalking-trace监控&#34;&gt;Skywalking Trace监控&lt;/h3&gt;
&lt;p&gt;Skywalking通过业务调用监控进行依赖分析，提供给我们了服务之间的服务调用拓扑关系、以及针对每个endpoint的trace记录。&lt;/p&gt;
&lt;p&gt;我们在之前看到consumer节点服务中发生了错误，让我们一起来定位下错误是发生在了什么地方又是什么原因呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl499mksxj30tq0drjsq.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;在每一条trace的信息中都可以看到当前请求的时间、GloableId、以及请求被调用的时间。我们分别看一看正确的调用和异常的调用。&lt;/p&gt;
&lt;h3 id=&#34;trace调用链路监控&#34;&gt;Trace调用链路监控&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl494ki2uj30tu09ewfb.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;图示展示的是一次正常的响应，这条响应总耗时19ms，它有4个span：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;span1 /getStore = 19ms  响应的总流转时间&lt;/li&gt;
&lt;li&gt;span2 /demo2/stores = 14ms  feign client 开始调用远程服务后的响应的总时间&lt;/li&gt;
&lt;li&gt;span3 /stores = 14ms 接口服务响应总时间&lt;/li&gt;
&lt;li&gt;span4 Mysql = 1ms  服务提供端查询数据库的时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里span2和span3的时间表现相同，其实是不同的，因为这里时间取了整。&lt;/p&gt;
&lt;p&gt;在每个Span中可以查看当前Span的相关属性。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;组件类型: SpringMVC、Feign&lt;/li&gt;
&lt;li&gt;Span状态: false&lt;/li&gt;
&lt;li&gt;HttpMethod: GET&lt;/li&gt;
&lt;li&gt;Url: http://192.168.16.125:10002/demo2/stores&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl494v1kaj30tw0ksdhf.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;这是一次正常的请求调用Trace日志，可能我们并不关心正常的时候，毕竟一切正常不就是我们期待的么！&lt;/p&gt;
&lt;p&gt;我们再来看下，异常状态下我们的Trace以及Span又是什么样的呢。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl495t7hrj30tx0asgmh.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;发生错误的调用链中Span中的is error标识变为true，并且在名为Logs的TAB中可以看到错误发生的具体原因。根据异常情况我们就可以轻松定位到影响业务的具体原因，从而快速定位问题，解决问题。&lt;/p&gt;
&lt;p&gt;通过Log我们看到连接被拒，那么可能是我们的网络出现了问题（可能性小，因为实际情况如果网络出现问题我们连这个trace都看不到了），也有可能是服务端配置问题无法正确建立连接。通过异常日志，我们迅速就找到了问题的关键。&lt;/p&gt;
&lt;p&gt;实际情况是，我把服务方停掉了，做了一次简单的模拟。可见，通过拓扑图示我们可以清晰的看到众多服务中哪个服务是出现了问题的，通过trace日志我们可以很快就定位到问题所在，在最短的时间内解决问题。&lt;/p&gt;
&lt;h2 id=&#34;三服务性能指标监控&#34;&gt;三、服务性能指标监控&lt;/h2&gt;
&lt;p&gt;Skywalking还可以查看具体Service的性能指标，根据相关的性能指标可以分析系统的瓶颈所在并提出优化方案。&lt;/p&gt;
&lt;h3 id=&#34;skywalking-性能监控&#34;&gt;Skywalking 性能监控&lt;/h3&gt;
&lt;p&gt;在服务调用拓扑图上点击相应的节点我们可以看到该服务的&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;SLA: 服务可用性（主要是通过请求成功与失败次数来计算）&lt;/li&gt;
&lt;li&gt;CPM: 每分钟调用次数&lt;/li&gt;
&lt;li&gt;Avg Response Time: 平均响应时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl49a0prgj30tz0cet98.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;从应用整体外部来看我们可以监测到应用在一定时间段内的&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;服务可用性指标SLA&lt;/li&gt;
&lt;li&gt;每分钟平均响应数&lt;/li&gt;
&lt;li&gt;平均响应时间&lt;/li&gt;
&lt;li&gt;服务进程PID&lt;/li&gt;
&lt;li&gt;服务所在物理机的IP、HostName、Operation System&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&#34;service-jvm信息监控&#34;&gt;Service JVM信息监控&lt;/h3&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl48ytfc0j30ty087t95.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;还可以监控到Service运行时的CPU、堆内存、非堆内存使用率、以及GC情况。这些信息来源于JVM。注意这里的数据可不是机器本身的数据。&lt;/p&gt;
&lt;h1 id=&#34;四服务告警&#34;&gt;四、服务告警&lt;/h1&gt;
&lt;p&gt;前文我们提到了通过查看拓扑图以及调用链路可以定位问题，可是运维人员又不可能一直盯着这些数据，那么我们就需要告警能力，在异常达到一定阈值的时候主动的提示我们去查看系统状态。&lt;/p&gt;
&lt;p&gt;在Sywalking 6.x版本中新增了对服务状态的告警能力。它通过webhook的方式让我们可以自定义我们告警信息的通知方式。诸如:邮件通知、微信通知、短信通知等。&lt;/p&gt;
&lt;h2 id=&#34;skywalking-服务告警&#34;&gt;Skywalking 服务告警&lt;/h2&gt;
&lt;p&gt;先来看一下告警的规则配置。在alarm-settings.xml中可以配置告警规则，告警规则支持自定义。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl4997b8rj30tn08dq3p.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;一份告警配置由以下几部分组成：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;service_resp_time_rule：告警规则名称 ***_rule （规则名称可以自定义但是必须以’_rule’结尾&lt;/li&gt;
&lt;li&gt;indicator-name：指标数据名称： 定义参见http://t.cn/EGhfbmd&lt;/li&gt;
&lt;li&gt;op: 操作符： &amp;gt; , &amp;lt; , = 【当然你可以自己扩展开发其他的操作符】&lt;/li&gt;
&lt;li&gt;threshold：目标值：指标数据的目标数据 如sample中的1000就是服务响应时间，配合上操作符就是大于1000ms的服务响应&lt;/li&gt;
&lt;li&gt;period: 告警检查周期：多久检查一次当前的指标数据是否符合告警规则&lt;/li&gt;
&lt;li&gt;counts: 达到告警阈值的次数&lt;/li&gt;
&lt;li&gt;silence-period：忽略相同告警信息的周期&lt;/li&gt;
&lt;li&gt;message：告警信息&lt;/li&gt;
&lt;li&gt;webhooks：服务告警通知服务地址&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Skywalking通过HttpClient的方式远程调用在配置项webhooks中定义的告警通知服务地址。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl49871dsj30tx087myl.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p&gt;了解了SW所传送的数据格式我们就可以对告警信息进行接收处理，实现我们需要的告警通知服务啦！&lt;/p&gt;
&lt;p&gt;我们将一个服务停掉，并将另外一个服务的某个对外暴露的接口让他休眠一定的时间。然后调用一定的次数观察服务的状态信息以及告警情况。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl496dosuj30ty04ogmu.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;h1 id=&#34;总结&#34;&gt;总结&lt;/h1&gt;
&lt;p&gt;本文简单的通过skwaylking的配置来对skywlaking的功能进行一次初步的了解，对skwaylking新提出的概念以及新功能进行简单的诠释，方便大家了解和使用。通过使用APM工具，可以让我们方便的查看微服务架构中系统瓶颈以及性能问题等。&lt;/p&gt;
&lt;h3 id=&#34;精选提问&#34;&gt;精选提问&lt;/h3&gt;
&lt;p&gt;&lt;strong&gt;问1：想问问选型的时候用pinpoint还是SK好？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：选型问题&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;要结合具体的业务场景， 比如你的代码运行环境 是java、php、net还是什么。&lt;/li&gt;
&lt;li&gt;pinpoint在安装部署上要比skywalking略微复杂&lt;/li&gt;
&lt;li&gt;pinpoint和sw支持的组件列表是不同的。
&lt;a href=&#34;https://github.com/apache/incubator-skywalking/blob/master/docs/en/setup/service-agent/java-agent/Supported-list.md&#34;&gt;https://github.com/apache/incubator-skywalking/blob/master/docs/en/setup/service-agent/java-agent/Supported-list.md&lt;/a&gt;你可以参照这里的支持列表对比下pinpoint的支持对象做一个简单对比。&lt;/li&gt;
&lt;li&gt;sw经过测试在并发量较高的情况下比pinpoint的吞吐量更好一些。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;问2：有没有指标统计，比如某个url 的top10 请求、响应最慢的10个请求？某个服务在整个链条中的耗时占比？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：1.sw自带有响应最慢的请求top10统计针对所有的endpoint的统计。
2.针对每个url的top10统计，sw本身没有做统计，数据都是现成的通过简单的检索就可以搜到你想要的结果。
3.没有具体的耗时占比，但是有具体总链路时间统计以及某个服务的耗时统计，至于占比自己算吧，可以看ppt中的调用链路监控的span时间解释。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问3：能不能具体说一下在你们系统中的应用？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：EOS8LA版本中，我们整合sw对应用提供拓扑、调用链路、性能指标的监控、并在sw数据的基础上增加系统的维度。
当服务数很庞大的时候，整体的拓扑其实就是一张密密麻麻的蜘蛛网。我们可以通过系统来选择具体某个系统下的应用。
8LA中SW是5.0.0alpha版本，受限于sw功能，我们并没有提供告警能力，这在之后会是我们的考虑目标。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问4：业务访问日志大概每天100G，kubernetes 环境中部署，使用稳定吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：监控数据没有长时间的存储必要，除非你有特定的需求。它有一定的时效性，你可以设置ttl自动清除过时信息。100g，es集群还是能轻松支撑的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问5：和pinpoint相比有什么优势吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;部署方式、使用方式简单&lt;/li&gt;
&lt;li&gt;功能特性支持的更多&lt;/li&gt;
&lt;li&gt;高并发性能会更好一些&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;&lt;strong&gt;问6：skywalking的侵入式追踪功能方便进行单服务链的服务追踪。但是跨多台服务器多项目的整体服务链追踪是否有整体设计考虑？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：sw本身特性就是对分布式系统的追踪，他是无侵入式的。无关你的应用部署在多少台服务器上。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问7：应用在加上代理之后性能会下降。请问您有什么解决方法吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：性能下降是在所难免的，但是据我了解，以及官方的测试，他的性能影响是很低的。这是sw的测试数据供你参考。
&lt;a href=&#34;https://skywalkingtest.github.io/Agent-Benchmarks/README_zh.html&#34;&gt;https://skywalkingtest.github.io/Agent-Benchmarks/README_zh.html&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问8：有异构系统需求的话可以用sw吗？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：只要skywalking的探针支持的应该都是可以的。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;问9：sw对于商用的web中间件，如bes、tongweb、websphere、weblogic的支持如何？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;答：商业组件支持的比较少，因为涉及到相关license的问题，sw项目组需要获得他们的支持来进行数据上报，据我了解，支持不是很好。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Zh: 关于 ElastiSsearch 因 basic 认证导致 SkyWalking 无法正常调用接口问题</title>
      <link>/zh/2019-01-02-skywalking-elasticsearch-basic/</link>
      <pubDate>Wed, 02 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/zh/2019-01-02-skywalking-elasticsearch-basic/</guid>
      <description>
        
        
        &lt;p&gt;SkyWalking 依赖 elasticsearch 集群，如果 elasticsearch 安装有 x-pack 插件的话，那么就会存在一个 Basic 认证，导致 skywalking 无法调用 elasticsearch, 解决方法是使用 nginx 做代理，让 nginx 来做这个 Basic 认证，那么这个问题就自然解决了。&lt;/p&gt;
&lt;p&gt;方法如下:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;安装 nginx&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;yum install -y nginx&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;配置 nginx&lt;/li&gt;
&lt;/ol&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;server {
        listen       9200 default_server;
        server_name  _;
        
        location / {
                 proxy_set_header Host $host;
                 proxy_set_header X-Real-IP $remote_addr;
                 proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                 proxy_pass http://localhost:9200;
                 #Basic字符串就是使用你的用户名(admin),密码(12345)编码后的值
                 #注意:在进行Basic加密的时候要使用如下格式如:admin:123456 注意中间有个冒号
                 proxy_set_header Authorization &amp;#34;Basic YWRtaW4gMTIzNDU2&amp;#34;;
        }
    }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ol start=&#34;3&#34;&gt;
&lt;li&gt;验证&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;curl localhost:9200&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;{
  &amp;#34;name&amp;#34; : &amp;#34;Yd0rCp9&amp;#34;,
  &amp;#34;cluster_name&amp;#34; : &amp;#34;es-cn-4590xv9md0009doky&amp;#34;,
  &amp;#34;cluster_uuid&amp;#34; : &amp;#34;jAPLrqY5R6KWWgHnGCWOAA&amp;#34;,
  &amp;#34;version&amp;#34; : {
    &amp;#34;number&amp;#34; : &amp;#34;6.3.2&amp;#34;,
    &amp;#34;build_flavor&amp;#34; : &amp;#34;default&amp;#34;,
    &amp;#34;build_type&amp;#34; : &amp;#34;tar&amp;#34;,
    &amp;#34;build_hash&amp;#34; : &amp;#34;053779d&amp;#34;,
    &amp;#34;build_date&amp;#34; : &amp;#34;2018-07-20T05:20:23.451332Z&amp;#34;,
    &amp;#34;build_snapshot&amp;#34; : false,
    &amp;#34;lucene_version&amp;#34; : &amp;#34;7.3.1&amp;#34;,
    &amp;#34;minimum_wire_compatibility_version&amp;#34; : &amp;#34;5.6.0&amp;#34;,
    &amp;#34;minimum_index_compatibility_version&amp;#34; : &amp;#34;5.0.0&amp;#34;
  },
  &amp;#34;tagline&amp;#34; : &amp;#34;You Know, for Search&amp;#34;
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;看到如上结果那么恭喜你成功了。&lt;/p&gt;

      </description>
    </item>
    
    <item>
      <title>Zh: 更容易理解将要到来的分布式链路追踪 6.0GA (翻译)</title>
      <link>/zh/2019-01-02-understand-trace-trans2cn/</link>
      <pubDate>Wed, 02 Jan 2019 00:00:00 +0000</pubDate>
      
      <guid>/zh/2019-01-02-understand-trace-trans2cn/</guid>
      <description>
        
        
        &lt;ul&gt;
&lt;li&gt;作者: Wu Sheng, tetrate, SkyWalking original creator&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/wu-sheng&#34;&gt;GitHub&lt;/a&gt;, &lt;a href=&#34;https://twitter.com/wusheng1108&#34;&gt;Twitter&lt;/a&gt;, &lt;a href=&#34;https://www.linkedin.com/in/wusheng1108&#34;&gt;Linkedin&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;翻译: jjlu521016&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;背景&#34;&gt;背景&lt;/h1&gt;
&lt;p&gt;在当前的微服务架构中分布式链路追踪是很有必要的一部分，但是对于一些用户来说如何去理解和使用分布式链路追踪的相关数据是不清楚的。
这个博客概述了典型的分布式跟踪用例，以及Skywalking的V6版本中新的可视化功能。我们希望新的用户通过这些示例来更好的理解。&lt;/p&gt;
&lt;h2 id=&#34;指标和拓扑图&#34;&gt;指标和拓扑图&lt;/h2&gt;
&lt;p&gt;跟踪数据支持两个众所周知的分析特性：&lt;code&gt;指标&lt;/code&gt;和&lt;code&gt;拓扑图&lt;/code&gt;&lt;br&gt;
&lt;code&gt;指标&lt;/code&gt;: 每个service, service instance, endpoint的指标都是从跟踪中的入口span派生的。指标代表响应时间的性能。所以可以有一个平均响应时间，99%的响应时间，成功率等。它们按service, service instance, endpoint进行分解。&lt;br&gt;
&lt;code&gt;拓扑图&lt;/code&gt;: 拓扑表示服务之间的链接，是分布式跟踪最有吸引力的特性。拓扑结构允许所有用户理解分布式服务关系和依赖关系，即使它们是不同的或复杂的。这一点很重要，因为它为所有相关方提供了一个单一的视图，无论他们是开发人员、设计者还是操作者。&lt;/p&gt;
&lt;p&gt;这里有一个拓扑图的例子包含了4个项目，包括kafka和两个外部依赖。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl44oveesj31gr0u00u1.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;-在skywalking的可选择UI0RocketBot的拓扑图-&lt;/p&gt;
&lt;h1 id=&#34;trace&#34;&gt;Trace&lt;/h1&gt;
&lt;p&gt;在分布式链路追踪系统中，我们花费大量资源（CPU、内存、磁盘和网络）来生成、传输和持久跟踪数据。让我们试着回答为什么要这样做？我们可以用跟踪数据回答哪些典型的诊断和系统性能问题？&lt;/p&gt;
&lt;p&gt;Skywalking v6包含两种追踪视图:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ol&gt;
&lt;li&gt;TreeMode: 第一次提供,帮助您更容易识别问题。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;ol start=&#34;2&#34;&gt;
&lt;li&gt;ListMode: 常规的时间线视图，通常也出现在其他跟踪系统中，如Zipkin。&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id=&#34;发生错误&#34;&gt;发生错误&lt;/h1&gt;
&lt;p&gt;在trace视图，最简单的部分是定位错误，可能是由代码异常或网络故障引起的。通过span详情提供的细节，ListMode和TreeMode都能够找到错误
&lt;img src=&#34;0081Kckwly1gkl44lh09oj32ha0se42w.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;-ListMode 错误span-&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl44kwl6nj31q20u0dl0.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;-TreeMode 错误span-&lt;/p&gt;
&lt;h1 id=&#34;慢span&#34;&gt;慢span&lt;/h1&gt;
&lt;p&gt;一个高优先级的特性是识别跟踪中最慢的span。这将使用应用程序代理捕获的执行持续时间。在旧的ListMode跟踪视图中，由于嵌套，父span几乎总是包括子span的持续时间。换句话说，一个缓慢的span通常会导致它的父节点也变慢，在Skywalking 6中，我们提供了 &lt;code&gt;最慢的前5个span&lt;/code&gt; 过滤器来帮助你您直接定位span。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkl44odek5j31sd0u0q8f.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;-最慢的前5个span-&lt;/p&gt;
&lt;h1 id=&#34;太多子span&#34;&gt;太多子span&lt;/h1&gt;
&lt;p&gt;在某些情况下，个别持续时间很快，但跟踪速度仍然很慢，如：
&lt;img src=&#34;0081Kckwly1gkl44mxmddj310i0lktbp.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;-没有慢span的追踪-&lt;/p&gt;
&lt;p&gt;如果要了解根问题是否与太多操作相关，请使用子范围号的&lt;code&gt;Top 5 of children span number&lt;/code&gt;,筛选器显示每个span的子级数量，突出显示前5个。
&lt;img src=&#34;0081Kckwly1gkl44nbryhj31fa0tcafl.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;-13个数据库访问相关的span-&lt;/p&gt;
&lt;p&gt;在这个截图中，有一个包含13个子项的span，这些子项都是数据库访问。另外，当您看到跟踪的概述时，这个2000ms跟踪的数据库花费了1380ms。
&lt;img src=&#34;0081Kckwly1gkl44lzkbwj31040famyy.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;-1380ms花费在数据库访问-&lt;/p&gt;
&lt;p&gt;在本例中，根本原因是数据库访问太多。这在其他场景中也很常见，比如太多的RPC或缓存访问。&lt;/p&gt;
&lt;h1 id=&#34;链路深度&#34;&gt;链路深度&lt;/h1&gt;
&lt;p&gt;跟踪深度也与延迟有关。像&lt;a href=&#34;#%E5%A4%AA%E5%A4%9A%E5%AD%90span&#34;&gt;太多子span&lt;/a&gt;的场景一样，每个span延迟看起来不错，但整个链路追踪的过程很慢。
&lt;img src=&#34;0081Kckwly1gkl44nv4gfj32600u0q7a.jpg&#34; alt=&#34;&#34;&gt;&lt;/p&gt;
&lt;p align=&#34;center&#34;&gt;-链路深度-&lt;/p&gt;
&lt;p&gt;上图所示,最慢的span小鱼500ms,对于2000毫秒的跟踪来说，速度并不太慢。当您看到第一行时，有四种不同的颜色表示这个分布式跟踪中涉及的四个services。每一个都需要100~400ms，这四个都需要近2000ms，从这里我们知道这个缓慢的跟踪是由一个序列中的3个RPC造成的。&lt;/p&gt;
&lt;h2 id=&#34;结束语&#34;&gt;结束语&lt;/h2&gt;
&lt;p&gt;分布式链路追踪和APM 工具帮助我们确定造成问题的根源，允许开发和操作团队进行相应的优化。我们希望您喜欢这一点，并且喜欢Apache Skywalking和我们的新链路追踪可视化界面。如果你喜欢的话，在&lt;a href=&#34;https://github.com/apache/incubator-skywalking&#34;&gt;github上面给我们加start来鼓励我们&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Skywakling 6计划在2019年的1月底完成release。您可以通过以下渠道联系项目团队成员&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;关注 &lt;a href=&#34;https://twitter.com/ASFSkyWalking&#34;&gt;skywalking推特&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;订阅邮件:dev@skywalking.apache.org。发送邮件到 &lt;a href=&#34;mailto:dev-subscribe@kywalking.apache.org&#34;&gt;dev-subscribe@kywalking.apache.org&lt;/a&gt; 来订阅.&lt;/li&gt;
&lt;li&gt;加入&lt;a href=&#34;https://gitter.im/OpenSkywalking/Lobby&#34;&gt;Gitter&lt;/a&gt;聊天室&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Zh: SkyWalking apm-sniffer 原理学习与插件编写</title>
      <link>/zh/2018-12-21-skywalking-apm-sniffer-beginning/</link>
      <pubDate>Fri, 21 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/zh/2018-12-21-skywalking-apm-sniffer-beginning/</guid>
      <description>
        
        
        &lt;h2 id=&#34;导读&#34;&gt;导读&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SkyWalking 中 Java 探针是使用 JavaAgent 的两大字节码操作工具之一的 Byte Buddy（另外是 Javassist）实现的。项目还包含.Net core 和 Nodejs 自动探针，以及 Service Mesh Istio 的监控。总体上，SkyWalking 是一个多语言，多场景的适配，特别为微服务、云原生和基于容器架构设计的可观测性分析平台（Observability Analysis Platform）。&lt;/li&gt;
&lt;li&gt;本文基于 SkyWalking 5.0.0-RC2 和 Byte Buddy 1.7.9 版本，会从以下几个章节，让大家掌握 SkyWalking Java 探针的使用，进而让 SkyWalking 在自己公司中的二次开发变得触手可及。
&lt;ul&gt;
&lt;li&gt;Byte Buddy 实现 JavaAgent 项目&lt;/li&gt;
&lt;li&gt;迭代 JavaAgent 项目的方法论&lt;/li&gt;
&lt;li&gt;SkyWalking agent 项目如何 Debug&lt;/li&gt;
&lt;li&gt;SkyWalking 插件开发实践&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;文章底部有 SkyWalking 和 Byte Buddy 相应的学习资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;byte-buddy-实现&#34;&gt;Byte Buddy 实现&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;首先如果你对 JavaAgent 还不是很了解可以先百度一下，或在公众号内看下《JavaAgent 原理与实践》简单入门下。&lt;/li&gt;
&lt;li&gt;SpringMVC 分发请求的关键方法相信已经不用我在赘述了，那我们来编写 Byte Buddy JavaAgent 代码吧。&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;AgentMain&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;premain&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;String agentOps&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; Instrumentation instrumentation&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; AgentBuilder&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;Default&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;type&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;ElementMatchers&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;named&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;org.springframework.web.servlet.DispatcherServlet&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;transform&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;((&lt;/span&gt;builder&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; type&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; classLoader&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; module&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt;
                        builder&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;method&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;ElementMatchers&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;named&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;doDispatch&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;))&lt;/span&gt;
                                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;intercept&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;MethodDelegation&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;DoDispatchInterceptor&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)))&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;installOn&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;instrumentation&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;编写 DispatcherServlet doDispatch 拦截器代码（是不是跟 AOP 如出一辙）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;DoDispatchInterceptor&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@RuntimeType&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;static&lt;/span&gt; Object &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;intercept&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Argument&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;0&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; HttpServletRequest request&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@SuperCall&lt;/span&gt; Callable&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; callable&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;final&lt;/span&gt; StringBuilder in &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; StringBuilder&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;request&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getParameterMap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;null&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; request&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getParameterMap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;size&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; 0&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            request&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getParameterMap&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;keySet&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;forEach&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;key &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&amp;gt;&lt;/span&gt; in&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;append&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;key=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; key &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;_value=&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; request&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getParameter&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;,&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;long&lt;/span&gt; agentStart &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; System&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;currentTimeMillis&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; callable&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;call&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            System&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;Exception :&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; e&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getMessage&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;());&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;finally&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            System&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;path:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; request&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getRequestURI&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34; 入参:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; in &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34; 耗时:&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;System&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;currentTimeMillis&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;-&lt;/span&gt; agentStart&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;resources/META-INF/MANIFEST.MF&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;Manifest-Version: 1.0
Premain-Class: com.z.test.agent.AgentMain
Can-Redefine-Classes: true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;pom.xml 文件&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;dependencies
    +net.bytebuddy.byte-buddy 
    +javax.servlet.javax.servlet-api *scope=provided
plugins
    +maven-jar-plugin *manifestFile=src/main/resources/META-INF/MANIFEST.MF
    +maven-shade-plugin *include:net.bytebuddy:byte-buddy:jar:
    +maven-compiler-plugin
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;小结：没几十行代码就完成了，通过 Byte Buddy 实现应用组件 SpringMVC 记录请求路径、入参、执行时间 JavaAgent 项目，是不是觉得自己很优秀。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;持续迭代-javaagent&#34;&gt;持续迭代 JavaAgent&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;本章节主要介绍 JavaAgent 如何 Debug，以及持续集成的方法论。&lt;/li&gt;
&lt;li&gt;首先我的 JavaAgent 项目目录结构如图所示:&lt;/li&gt;
&lt;li&gt;应用项目是用几行代码实现的 SpringBootWeb 项目:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@SpringBootApplication&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;scanBasePackages &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;TestBootWeb&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        SpringApplication&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;TestBootWeb&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@RestController&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;ApiController&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@PostMapping&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;/ping&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;ping&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;HttpServletRequest request&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;pong&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;下面是关键 JavaAgent 项目如何持续迭代与集成:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;VM options增加:-JavaAgent:{$HOME}/Code/github/z_my_test/test-agent/target/test-agent-1.0-SNAPSHOT.jar=args
Before launch 在Build之前增加：
    Working directory:{$HOME}/Code/github/incubator-skywalking
    Command line:-T 1C -pl test-agent -am clean package -Denforcer.skip=true -Dmaven.test.skip=true -Dmaven.compile.fork=true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;小结：看到这里的将 JavaAgent 持续迭代集成方法，是不是瞬间觉得自己手心已经发痒起来，很想编写一个自己的 agent 项目了呢，等等还有一个好消息:test-demo 这 10 几行的代码实现的 Web 服务，居然有 5k 左右的类可以使用 agent 增强。&lt;/li&gt;
&lt;li&gt;注意 mvn 编译加速的命令是 maven3 + 版本以上才支持的哈。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;skywalking-debug&#34;&gt;SkyWalking Debug&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;峰回路转，到了文章的主题《SkyWalking 之高级用法》的正文啦。首先，JavaAgent 项目想 Debug，还需要将 agent 代码与接入 agent 项目至少在同一个工作空间内，网上方法有很多，这里我推荐大家一个最简单的方法。File-&amp;gt;New-&amp;gt;Module from Exisiting Sources… 引入 skywalking-agent 源码即可&lt;/li&gt;
&lt;li&gt;详细的 idea 编辑器配置：&lt;/li&gt;
&lt;li&gt;优化 SkyWalking agent 编译时间，我的集成时间优化到 30 秒左右：&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;VM options增加:-JavaAgent:-JavaAgent:{$HOME}/Code/github/incubator-skywalking/skywalking-agent/skywalking-agent.jar：不要用dist里面的skywalking-agent.jar，具体原因大家可以看看源码：apm-sniffer/apm-agent/pom.xml中的maven插件的使用。
Before launch 在Build之前增加：
    Working directory:{$HOME}/Code/github/incubator-skywalking
    Command line:-T 1C -pl apm-sniffer/apm-sdk-plugin -amd clean package -Denforcer.skip=true -Dmaven.test.skip=true -Dmaven.compile.fork=true： 这里我针对插件包，因为紧接着下文要开发插件
另外根pom注释maven-checkstyle-plugin也可加速编译
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;kob-之-skywalking-插件编写&#34;&gt;kob 之 SkyWalking 插件编写&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;kob（贝壳分布式作业调度框架）是贝壳找房项目微服务集群中的基础组件，通过编写贝壳分布式作业调度框架的 SkyWalking 插件，可以实时收集作业调度任务的执行链路信息，从而及时得到基础组件的稳定性，了解细节可点击阅读《&lt;a href=&#34;https://mp.weixin.qq.com/s/3hXyFCgclsuoznNQ2ulC4g&#34;&gt;贝壳分布式调度框架简介&lt;/a&gt;》。想详细了解 SkyWalking 插件编写可在文章底部参考链接中，跳转至对应的官方资源，好话不多说，代码一把唆起来。&lt;/li&gt;
&lt;li&gt;apm-sdk-plugin pom.xml 增加自己的插件 model&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;&lt;span style=&#34;color:#000080&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;apm-sdk-plugin&lt;span style=&#34;color:#000080&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color:#000080&#34;&gt;&amp;lt;modules&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color:#000080&#34;&gt;&amp;lt;module&amp;gt;&lt;/span&gt;kob-plugin&lt;span style=&#34;color:#000080&#34;&gt;&amp;lt;/module&amp;gt;&lt;/span&gt;
        ...
    &lt;span style=&#34;color:#000080&#34;&gt;&amp;lt;modules&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;resources.skywalking-plugin.def 增加自己的描述&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-xml&#34; data-lang=&#34;xml&#34;&gt;kob=org.apache.skywalking.apm.plugin.kob.KobInstrumentation
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;在 SkyWalking 的项目中，通过继承 ClassInstanceMethodsEnhancePluginDefine 可以定义需要拦截的类和增强的方法，编写作业调度方法的 instrumentation&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;KobInstrumentation&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;extends&lt;/span&gt; ClassInstanceMethodsEnhancePluginDefine &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;final&lt;/span&gt; String ENHANCE_CLASS &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;com.ke.kob.client.spring.core.TaskDispatcher&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;final&lt;/span&gt; String INTERCEPT_CLASS &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;org.apache.skywalking.apm.plugin.kob.KobInterceptor&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;protected&lt;/span&gt; ClassMatch &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;enhanceClass&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; NameMatch&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;byName&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;ENHANCE_CLASS&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;protected&lt;/span&gt; ConstructorInterceptPoint&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;getConstructorsInterceptPoints&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;protected&lt;/span&gt; InstanceMethodsInterceptPoint&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;getInstanceMethodsInterceptPoints&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; InstanceMethodsInterceptPoint&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; InstanceMethodsInterceptPoint&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; ElementMatcher&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;&lt;/span&gt;MethodDescription&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;getMethodsMatcher&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; named&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;dispatcher1&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
                    &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;getMethodsInterceptor&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; INTERCEPT_CLASS&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
                    &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;isOverrideArgs&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
                    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
                &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;通过实现 InstanceMethodsAroundInterceptor 后，定义 beforeMethod、afterMethod 和 handleMethodException 的实现方法，可以环绕增强指定目标方法，下面自定义 interceptor 实现 span 的跟踪（这里需要注意 SkyWalking 中 span 的生命周期，在 afterMethod 方法中结束 span）&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-Java&#34; data-lang=&#34;Java&#34;&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;KobInterceptor&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;implements&lt;/span&gt; InstanceMethodsAroundInterceptor &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;beforeMethod&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;EnhancedInstance objInst&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; Method method&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; allArguments&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt;  Class&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; argumentsTypes&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; MethodInterceptResult result&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;throws&lt;/span&gt; Throwable &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;final&lt;/span&gt; ContextCarrier contextCarrier &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;new&lt;/span&gt; ContextCarrier&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
        com&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;ke&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;kob&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;client&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;spring&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;model&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;TaskContext&lt;/span&gt; context &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;TaskContext&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; allArguments&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;0&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;];&lt;/span&gt;
        CarrierItem next &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; contextCarrier&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;items&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;next&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;hasNext&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
            next &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; next&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
            next&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;setHeadValue&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;JSON&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;toJSONString&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;context&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getUserParam&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;()));&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
        AbstractSpan span &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;=&lt;/span&gt; ContextManager&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;createEntrySpan&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;client:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt;allArguments&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[&lt;/span&gt;1&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;]+&lt;/span&gt;&lt;span style=&#34;color:#d14&#34;&gt;&amp;#34;,task:&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;+&lt;/span&gt;context&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;getTaskKey&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(),&lt;/span&gt; contextCarrier&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
        span&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;setComponent&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;ComponentsDefine&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;TRANSPORT_CLIENT&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
        SpanLayer&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;asRPCFramework&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;span&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;afterMethod&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;EnhancedInstance objInst&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; Method method&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; allArguments&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; Class&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; argumentsTypes&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; Object ret&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;throws&lt;/span&gt; Throwable &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
        ContextManager&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#008080&#34;&gt;stopSpan&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;();&lt;/span&gt;
        &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;return&lt;/span&gt; ret&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#3c5d5d;font-weight:bold&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#458;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#900;font-weight:bold&#34;&gt;handleMethodException&lt;/span&gt;&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;(&lt;/span&gt;EnhancedInstance objInst&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; Method method&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;[]&lt;/span&gt; allArguments&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; Class&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;&amp;lt;?&amp;gt;[]&lt;/span&gt; argumentsTypes&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;,&lt;/span&gt; Throwable t&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;ul&gt;
&lt;li&gt;实现效果，将操作名改成任务执行节点 + 任务执行方法，实现 kob 的 SkyWalking 的插件编写，加上报警体系，可以进一步增加公司基础组件的稳定性。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;参考链接&#34;&gt;参考链接&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/apache/skywalking&#34;&gt;Apache SkyWalking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/raphw/byte-buddy&#34;&gt;Byte Buddy（runtime code generation for the Java virtual machine）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Zh: SkyWalking 源码解析合集</title>
      <link>/zh/2018-12-21-skywalking-source-code-read/</link>
      <pubDate>Fri, 21 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/zh/2018-12-21-skywalking-source-code-read/</guid>
      <description>
        
        
        &lt;h2 id=&#34;搭建调试环境&#34;&gt;搭建调试环境&lt;/h2&gt;
&lt;p&gt;阅读 SkyWalking 源码，从配置调试环境开始。&lt;/p&gt;
&lt;p&gt;一定一定一定不要干读代码，而是通过调试的方式。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JaredTan95/skywalking-tutorials/blob/master/01-%E9%80%9A%E8%BF%87Skywalking-5.x%E7%89%88%E6%9C%AC%E7%9A%84%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BA%E5%B9%B6%E8%BF%90%E8%A1%8C/Note.md&#34;&gt;01 通过 Skywalking-5.x 版本的源码构建并运行&lt;/a&gt; 👉：&lt;a href=&#34;https://www.bilibili.com/video/av35806851/&#34;&gt;哔哩哔哩&lt;/a&gt; | &lt;a href=&#34;https://v.qq.com/x/page/d07924w6u13.html&#34;&gt;腾讯视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JaredTan95/skywalking-tutorials/blob/master/02-%E9%80%9A%E8%BF%87Skywalking-6.x%E7%89%88%E6%9C%AC%E7%9A%84%E6%BA%90%E7%A0%81%E6%9E%84%E5%BB%BA%E5%B9%B6%E8%BF%90%E8%A1%8C/Note.md&#34;&gt;02 通过 Skywalking-6.x 版本的源码构建并运行&lt;/a&gt; 👉：&lt;a href=&#34;https://www.bilibili.com/video/av35990012/&#34;&gt;哔哩哔哩&lt;/a&gt; | &lt;a href=&#34;https://v.qq.com/x/page/s0793890ce6.html&#34;&gt;腾讯视频&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/JaredTan95/skywalking-tutorials/blob/master/03-Java%E5%BA%94%E7%94%A8%EF%BC%88%E6%8E%A2%E9%92%88%EF%BC%89%E6%8E%A5%E5%85%A5Skywalking/Note.md&#34;&gt;03 Java 应用（探针）接入 Skywalking[6.x]&lt;/a&gt; 👉：&lt;a href=&#34;https://www.bilibili.com/video/av36172319/&#34;&gt;哔哩哔哩&lt;/a&gt; | &lt;a href=&#34;https://v.qq.com/x/page/w0795uri7jy.html&#34;&gt;腾讯视频&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;skywalking-3x-源码解析合集&#34;&gt;SkyWalking 3.X 源码解析合集&lt;/h2&gt;
&lt;p&gt;虽然是基于 3.X 版本的源码解析，但是对于阅读 SkyWalking Java Agent 和插件部分，同样适用。&lt;/p&gt;
&lt;p&gt;对于 SkyWalking Collector 部分，可以作为一定的参考。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/build-debugging-environment?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— 调试环境搭建》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/agent-init?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Agent 初始化》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/agent-plugin-system?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Agent 插件体系》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/collector-init?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Collector 初始化》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/collector-cluster-module?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Collector Cluster 集群管理》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/collector-client-component?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Collector Client Component 客户端组件》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/collector-server-component?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Collector Server Component 服务器组件》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/collector-jetty-server-module?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Collector Jetty Server Manager》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/collector-grpc-server-module?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Collector gRPC Server Manager》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/collector-naming-server?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Collector Naming Server 命名服务》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/collector-queue-module?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Collector Queue 队列组件》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/collector-storage-module?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Collector Storage 存储组件》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/collector-streaming-first?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Collector Streaming Computing 流式处理（一）》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/collector-streaming-second?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Collector Streaming Computing 流式处理（二）》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/collector-cache-module?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Collector Cache 缓存组件》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/collector-remote-module?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Collector Remote 远程通信服务》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/data-carrier?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— DataCarrier 异步处理库》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/agent-remote-manager?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Agent Remote 远程通信服务》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/register?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— 应用于应用实例的注册》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/agent-dictionary?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Agent DictionaryManager 字典管理》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/agent-collect-trace?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Agent 收集 Trace 数据》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/agent-send-trace?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Agent 发送 Trace 数据》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/collector-receive-trace?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Collector 接收 Trace 数据》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/collector-store-trace?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Collector 存储 Trace 数据》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/jvm-collect?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— JVM 指标的收集与存储》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/ui-1-application?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— 运维界面（一）之应用视角》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/ui-2-instance?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— 运维界面（二）之应用实例视角》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/ui-3-trace?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— 运维界面（三）之链路追踪视角》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/ui-4-operation?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— 运维界面（四）之操作视角》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/@trace-for-any-methods?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— @Trace 注解想要追踪的任何方法》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/trace-id-integrate-into-logs?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— traceId 集成到日志组件》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/agent-plugin-tomcat?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Agent 插件（一）之 Tomcat》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/agent-plugin-dubbo?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Agent 插件（二）之 Dubbo》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/agent-plugin-spring-mvc?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Agent 插件（三）之 SpringMVC》&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/agent-plugin-mongodb?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 源码分析 —— Agent 插件（四）之 MongoDB》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;skywalking-6x-源码解析合集&#34;&gt;SkyWalking 6.X 源码解析合集&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.iocoder.cn/SkyWalking/6/build-debugging-environment/?vip&amp;amp;guanfang&#34;&gt;《SkyWalking 6.x 源码分析 —— 调试环境搭建》&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
    <item>
      <title>Zh: Apache SkyWalking 5.0 中文版图文详解使用手册</title>
      <link>/zh/2018-12-18-apache-skywalking-5-0-userguide/</link>
      <pubDate>Tue, 18 Dec 2018 00:00:00 +0000</pubDate>
      
      <guid>/zh/2018-12-18-apache-skywalking-5-0-userguide/</guid>
      <description>
        
        
        &lt;h2 id=&#34;版本选择&#34;&gt;版本选择&lt;/h2&gt;
&lt;p&gt;我们采用的是 5.0.0-RC2 的版本，SkyWalking 的版本信息可以参考 &lt;a href=&#34;https://github.com/apache/incubator-skywalking/blob/5.x/CHANGES.md&#34;&gt;https://github.com/apache/incubator-skywalking/blob/5.x/CHANGES.md&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;那么为什么我们没有采用 5.1.0 版本呢，这是因为我们公司内部需要支持 es x-pack，但是在官方发布里面，没有支持 xpack 的版本。&lt;/p&gt;
&lt;p&gt;在 Apache SkyWalking 官方文档 &lt;a href=&#34;https://github.com/CharlesMaster/incubator-skywalking/tree/master/docs/others/cn&#34;&gt;https://github.com/CharlesMaster/incubator-skywalking/tree/master/docs/others/cn&lt;/a&gt; 中有提到，SkyWalking 5.x 仍受社区支持。&lt;/p&gt;
&lt;p&gt;对于用户计划从 5.x 升级到 6.x，您应该知道关于有一些概念的定义的变更。最重要的两个改变了的概念是：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Application（在 5.x 中）更改为 &lt;strong&gt;Service&lt;/strong&gt;（在 6.x 中），Application Instance 也更改为 &lt;strong&gt;Service Instance&lt;/strong&gt;。&lt;/li&gt;
&lt;li&gt;Service（在 5.x 中）更改为 Endpoint（在 6.x 中）。&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;图文详解&#34;&gt;图文详解&lt;/h2&gt;
&lt;p&gt;Apache SkyWalking 的监控界面由 Monitor 和 Trace 两者构成，Monitor 菜单又包括 Dashbord、Topology、Application、Service、Alarm 五个子菜单构成。本文就是围绕这些菜单分别逐一进行介绍。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfaoynmhj30e20mmaan.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;monitor&#34;&gt;Monitor&lt;/h2&gt;
&lt;p&gt;当用户通过 SkyWalking 登陆界面使用用户名、密码登陆以后，就会默认进入到 SkyWalking 的 Monitor 下的 Dashboard 界面&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfapc02wj316g0m2gmn.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;dashboard&#34;&gt;Dashboard&lt;/h2&gt;
&lt;p&gt;下图就是用户登陆之后都会看到的关键 Dashboard 页面，在这个页面的下方的关键指标，图中都做了详细的解释。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfey6mylj31mb0u0qnv.jpg&#34; alt=&#34;image-20201110220355494&#34;&gt;&lt;/p&gt;
&lt;p&gt;上图中 app 需要强调的是，52 个 app 并不代表 52 个应用，比如 paycenter 有两台 paycenter1 和 paycenter2 就算了 2 个 app，当然还有一些应用是 3 个以上的。在我们公司，paycenter1、paycenter2 这些运维都和我们跳板机管理平台上的名称设置的一样，约定大于配置，开发人员可以更加便捷的排查问题。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;再次修正一下，关于 dashboard 页面的 app 数，语言类探针，是探针的 app_code 来决定的。比如我们公司的线上配置就是 agent.application_code=auth-center-1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;上图中需要解释两个概念：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;cpm 代表每分钟请求次数&lt;/li&gt;
&lt;li&gt;SLA=(TRANSACTION_CALLS- TRANSACTION_ERROR_CALLS ) * 10000 ) / TRANSACTION_CALLS&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;该页面主要支持四个跳转：&lt;/p&gt;
&lt;p&gt;一、在上图中，App 板块上的帮助选项是可以直接跳转到 Application 监控页面的。 &lt;img src=&#34;0081Kckwly1gkkfatq9rrj31340bajs1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;二、 Service 板块上的帮助选项是可以直接跳转到 Service 监控页面的。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfghp1izj30m6086t9a.jpg&#34; alt=&#34;image-20201110220524415&#34;&gt;&lt;/p&gt;
&lt;p&gt;三、 Slow Service 列表中的每一个慢服务点击以后都会进入到其专项的 Service 监控页面。&lt;/p&gt;
&lt;p&gt;四、 Application Throughput 列表中的每一个 Application 点击以后也都是可以进入到其专项的 Application 监控页面。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;关于 Application 和 Service 的详细介绍我们后续会展开&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在 Dashboard 的页面上部分，还有一个选择功能模块： &lt;img src=&#34;0081Kckwly1gkkfauiuvnj326s0egacd.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;左侧部分可以定期 refresh Dashboard 的数据，右侧则可以调整整体的查询区间。&lt;/p&gt;
&lt;h2 id=&#34;topology&#34;&gt;Topology&lt;/h2&gt;
&lt;p&gt;点击 Monitor 菜单下的 Topology 你会看到下面这张拓扑图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfasjfraj31rc0u0tcb.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然这张图太过于夸张了，如果接入 SkyWalking 的应用并不是很多，会如下图所示： &lt;img src=&#34;0081Kckwly1gkkfas3wlaj318f0homy1.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;左侧的三个小按钮可以调整你的视图，支持拖拽。右侧可以输入你所关心的应用名。比如我们输入一个支付和订单两个应用，左侧的拓扑图会变得更加清晰：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfaqs4umj31mu0u0q6o.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;另外，上图中的绿色圆圈都是可以点击的，如果你点击以后，还会出现节点信息： &lt;img src=&#34;0081Kckwly1gkkfaqefu4j30sk0my3zh.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;application&#34;&gt;Application&lt;/h2&gt;
&lt;p&gt;点击 Monitor 菜单下的 Application 你会看到下面这张图，这张图里你可以看到的东西都做了注解。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfef76xcj31ti0u01fl.jpg&#34; alt=&#34;image-20201110220324947&#34;&gt;&lt;/p&gt;
&lt;p&gt;这张图里有一个惊喜，就是如果你点开 More Server Details，你可以看到更多的信息&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfdluzblj31oy0u0tm2.jpg&#34; alt=&#34;image-20201110220238472&#34;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfdetks9j316y0u0tgg.jpg&#34; alt=&#34;image-20201110220226783&#34;&gt;&lt;/p&gt;
&lt;p&gt;是的，除了 Host、IPv4、Pid、OS 以外，你还可以看到 CPU、Heap、Non-Heap、GC（Young GC、Old GC）等详细监控信息。&lt;/p&gt;
&lt;h2 id=&#34;service&#34;&gt;Service&lt;/h2&gt;
&lt;p&gt;点击 Monitor 菜单下的 Service 你会看到下面这张图，这张图里你可以看到的同样都做了注解。 &lt;img src=&#34;0081Kckwly1gkkfaps4xnj31pk0u0jul.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;关于 Dependency Map 这张图我们再补充一下，鼠标悬停可以看到每个阶段的执行时间，这是 Service 下的功能 &lt;img src=&#34;0081Kckwly1gkkfauwowgj31v00u0mzz.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;我们点开图中该图中 Top 20 Slow Traces 下面的被我马赛克掉的 trace 的按钮框，可以看到如下更加详细的信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfftbd4rj31k50u04qp.jpg&#34; alt=&#34;image-20201110220444481&#34;&gt;&lt;/p&gt;
&lt;p&gt;这些信息可以帮助我们知道每一个方法在哪个阶段那个具体实现耗时了多久。&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkffi442xj32060n67go.jpg&#34; alt=&#34;image-20201110220427876&#34;&gt;&lt;/p&gt;
&lt;p&gt;如上图所示，每一行基本都是可以打开的，每一行都包含了 Tags、Logs 等监控内容&lt;/p&gt;
&lt;h2 id=&#34;alarm&#34;&gt;Alarm&lt;/h2&gt;
&lt;p&gt;点击 Monitor 菜单下的 Alarm 你会看到告警菜单。目前 5.X 版本的还没有接入邮件、短信等告警方式，后续 6 支持 webhook，用户可以自己去接短信和邮件。&lt;/p&gt;
&lt;p&gt;告警内容中你可以看到 Applicaion、Server 和 Service 三个层面的告警内容&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfcqi2uxj31wd0u0h00.jpg&#34; alt=&#34;image-20201110220147756&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;trace&#34;&gt;Trace&lt;/h2&gt;
&lt;p&gt;Trace 是一个非常实用的功能，用户可以根据精确的 TraceId 去查找&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfavf2lgj31l00u0mys.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;也可以设定时间段去查找&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfh13afbj31n50u0akg.jpg&#34; alt=&#34;image-20201110220555459&#34;&gt;&lt;/p&gt;
&lt;p&gt;我在写使用手册时候，非常巧的是，看到了上图三起异常，于是我们往下拉列表看到了具体的数据&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfhcjpa6j32440nck39.jpg&#34; alt=&#34;image-20201110220614258&#34;&gt;&lt;/p&gt;
&lt;p&gt;点击进去，我们可以看到具体的失败原因 &lt;img src=&#34;0081Kckwly1gkkfaw3kppj31lu0u042l.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;当然用户也可以直接将 Trace State 调整为 Error 级别进行查询&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfax9uubj31ps0u0413.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;再回顾一遍&#34;&gt;再回顾一遍&lt;/h2&gt;
&lt;p&gt;一、首先我们进入首页：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfhu2nboj31ca0ms15o.jpg&#34; alt=&#34;image-20201110220641793&#34;&gt;&lt;/p&gt;
&lt;p&gt;二、点击一下首页的 Slow Service 的 projectC，可以看到如下信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfi5994yj31aq0pnk4q.jpg&#34; alt=&#34;image-20201110220700002&#34;&gt;&lt;/p&gt;
&lt;p&gt;三、如果点击首页的 Appliation Throughput 中的 projectD，可以看到如下信息：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfaroz97j31bl0kwta6.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;p&gt;四、继续点进去右下角的这个 slow service 里的 Consumer，我们可以看到下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkfawsvybj31ax0p6dl4.jpg&#34; alt=&#34;img&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/AsfSkyWalking/status/1013616673218179072&#34;&gt;https://twitter.com/AsfSkyWalking/status/1013616673218179072&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/AsfSkyWalking/status/1013617100143800320&#34;&gt;https://twitter.com/AsfSkyWalking/status/1013617100143800320&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
