<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache SkyWalking – DotNetCore</title>
    <link>/zh_tags/dotnetcore/</link>
    <description>Recent content in DotNetCore on Apache SkyWalking</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 24 May 2018 00:00:00 +0000</lastBuildDate>
    
	  <atom:link href="/zh_tags/dotnetcore/index.xml" rel="self" type="application/rss+xml" />
    
    
      
        
      
    
    
    <item>
      <title>Zh: Apache SkyWalking 为.NET Core带来开箱即用的分布式追踪和应用性能监控</title>
      <link>/zh/2018-05-24-skywalking-net/</link>
      <pubDate>Thu, 24 May 2018 00:00:00 +0000</pubDate>
      
      <guid>/zh/2018-05-24-skywalking-net/</guid>
      <description>
        
        
        &lt;p&gt;在大型网站系统设计中，随着分布式架构，特别是微服务架构的流行，我们将系统解耦成更小的单元，通过不断的添加新的、小的模块或者重用已经有的模块来构建复杂的系统。随着模块的不断增多，一次请求可能会涉及到十几个甚至几十个服务的协同处理，那么如何准确快速的定位到线上故障和性能瓶颈，便成为我们不得不面对的棘手问题。&lt;/p&gt;
&lt;p&gt;为解决分布式架构中复杂的服务定位和性能问题，Google 在论文&lt;a href=&#34;http://research.google.com/pubs/pub36356.html&#34;&gt;《Dapper, a Large-Scale Distributed Systems Tracing Infrastructure》&lt;/a&gt;中提出了分布式跟踪系统的设计和构建思路。在这样的背景下，&lt;a href=&#34;https://github.com/apache/incubator-skywalking&#34;&gt;Apache SkyWalking&lt;/a&gt; 创建于 2015 年，参考 Dapper 论文实现分布式追踪功能，并逐渐进化为一个完整功能的 &lt;a href=&#34;https://en.wikipedia.org/wiki/Application_performance_management&#34;&gt;Application Performance Management&lt;/a&gt; 系统，用于追踪、监控和诊断大型分布式系统，尤其是容器和云原生下的微服务系统。&lt;/p&gt;
&lt;p&gt;今年初我在尝试使用.NET Core 构建分布式追踪系统 &lt;a href=&#34;https://github.com/liuhaoyang/butterfly&#34;&gt;Butterfly&lt;/a&gt; 时接触到 SkyWalking 团队，开始和 SkyWalking 团队合作探索 SkyWalking 对.NET Core 的支持，并于 4 月发布 SkyWalking .NET Core 探针的 &lt;a href=&#34;https://www.oschina.net/news/95324/apache-skywalking-apm-support-dot-net-core&#34;&gt;第一个版本&lt;/a&gt;，同时我也有幸加入 SkyWalking 团队共同进行 SkyWalking 在多语言生态的推动。在.NET Core 探针 v0.1 版本发布之后，得到了一些同学的&lt;a href=&#34;https://www.jianshu.com/p/3ddd986c7581&#34;&gt;尝鲜使用&lt;/a&gt;，也得到诸多改进的建议。经过几周的迭代，SkyWalking .NET Core 探针于今天发布 v0.2 release，在 v0.1 的基础上增加了稳定性和 HttpClient 及数据库驱动的追踪支持。&lt;/p&gt;
&lt;p&gt;在使用 SkyWalking 对.NET Core 应用追踪之前，我们需要先部署 SkyWalking Collector 收集分析 Trace 和 Elasticsearch 作为 Trace 数据存储。SkyWalking 支持 5.x 的 ES，所以我们需要下载安装对应版本的 ES，并配置 ES 的 &lt;code&gt;cluster.name&lt;/code&gt; 为 &lt;code&gt;CollectorDBCluster&lt;/code&gt;。然后部署 SkyWalking 5.0 beta 或更高版本 (下载地址:http://skywalking.apache.org/downloads/)。更详细的 Collector 部署文档，请参考 &lt;a href=&#34;https://github.com/apache/incubator-skywalking/blob/master/docs/en/Deploy-backend-in-standalone-mode.md&#34;&gt;Deploy-backend-in-standalone-mode&lt;/a&gt; 和 &lt;a href=&#34;https://github.com/apache/incubator-skywalking/blob/master/docs/en/Deploy-backend-in-cluster-mode.md&#34;&gt;Deploy-backend-in-cluster-mode&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;最后我们使用示例项目来演示在.NET Core 应用中使用 SkyWalking 进行追踪和监控，克隆 SkyWalking-NetCore 项目到本地：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;git clone https://github.com/OpenSkywalking/skywalking-netcore.git
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;进入 skywalking-netcore 目录：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#0086b3&#34;&gt;cd&lt;/span&gt; skywalking-netcore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;还原 nuget package：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dotnet restore
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;启动示例项目：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#fff;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;dotnet run -p sample/SkyWalking.Sample.Backend
dotnet run -p sample/SkyWalking.Sample.Frontend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;访问示例应用：&lt;/p&gt;
&lt;p&gt;打开 SkyWalking WebUI 即可看到我们的应用监控面板 &lt;a href=&#34;http://localhost:8080/&#34;&gt;http://localhost:8080&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Dashboard 视图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkkethvv8nj31kt0u0gpc.jpg&#34; alt=&#34;dashboard&#34;&gt;&lt;/p&gt;
&lt;p&gt;TopologyMap 视图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkketialrej31ku0u0761.jpg&#34; alt=&#34;topology_map&#34;&gt;&lt;/p&gt;
&lt;p&gt;Application 视图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkketj8amrj31ky0u0dii.jpg&#34; alt=&#34;application&#34;&gt;&lt;/p&gt;
&lt;p&gt;Trace 视图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkketir5ahj31kr0u0mzx.jpg&#34; alt=&#34;trace.png&#34;&gt;&lt;/p&gt;
&lt;p&gt;TraceDetails 视图&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;0081Kckwly1gkketh1e85j31kl0u0wi4.jpg&#34; alt=&#34;trace_details.png&#34;&gt;&lt;/p&gt;
&lt;h2 id=&#34;github&#34;&gt;GitHub&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;SkyWalking Github Repo：&lt;a href=&#34;https://github.com/apache/incubator-skywalking/&#34;&gt;https://github.com/apache/incubator-skywalking&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;SkyWalking-NetCore Github Repo：https://github.com/OpenSkywalking/skywalking-netcore&lt;/li&gt;
&lt;/ul&gt;

      </description>
    </item>
    
  </channel>
</rss>
